
/Users/rueloquindo/Projects/LearnParticle/Argon-6KFollowers/Xenon-6KFollowers/target/1.4.0/xenon/Xenon-6KFollowers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000037f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00017cb4  2**0
                  CONTENTS
  4 .data         00000478  2003e028  000d7810  0000e028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000350  2003e4a0  2003e4a0  0001e4a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7c88  000d7c88  00017c88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7cb0  000d7cb0  00017cb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dbf8b  00000000  00000000  00017cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011896  00000000  00000000  000f3c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f262  00000000  00000000  001054d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002740  00000000  00000000  00124737  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004688  00000000  00000000  00126e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037933  00000000  00000000  0012b4ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b5b1  00000000  00000000  00162e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104375  00000000  00000000  0018e3e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d360  00000000  00000000  00292758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fec6 	bl	d6dbe <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fecb 	bl	d6dd4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e028 	.word	0x2003e028
   d4048:	000d7810 	.word	0x000d7810
   d404c:	2003e4a0 	.word	0x2003e4a0
   d4050:	2003e4a0 	.word	0x2003e4a0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fc59 	bl	d6910 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7804 	.word	0x000d7804
   d4080:	000d77c4 	.word	0x000d77c4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b86e 	b.w	d4164 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8e5 	bl	d4258 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bc0b 	b.w	d68ac <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b90b 	b.w	d52b0 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 b909 	b.w	d52b0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b90f 	b.w	d52c0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b90d 	b.w	d52c0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 f868 	bl	d5184 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d4df5 	.word	0x000d4df5

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_Z9myHandlerPKcS0_>:
const char * followers;
char buffer[10];
int mutex = 0;

void myHandler(const char *event, const char *data)
{
   d40d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d2:	460c      	mov	r4, r1
   d40d4:	4605      	mov	r5, r0
  Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
   d40d6:	f002 fb9d 	bl	d6814 <_Z16_fetch_usbserialv>
   d40da:	4a07      	ldr	r2, [pc, #28]	; (d40f8 <_Z9myHandlerPKcS0_+0x28>)
   d40dc:	2c00      	cmp	r4, #0
   d40de:	bf18      	it	ne
   d40e0:	4622      	movne	r2, r4
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40e2:	9200      	str	r2, [sp, #0]
   d40e4:	462b      	mov	r3, r5
   d40e6:	4a05      	ldr	r2, [pc, #20]	; (d40fc <_Z9myHandlerPKcS0_+0x2c>)
   d40e8:	2101      	movs	r1, #1
   d40ea:	f001 fe5b 	bl	d5da4 <_ZN5Print11printf_implEbPKcz>
  followers = data;
   d40ee:	4b04      	ldr	r3, [pc, #16]	; (d4100 <_Z9myHandlerPKcS0_+0x30>)
   d40f0:	601c      	str	r4, [r3, #0]
}
   d40f2:	b003      	add	sp, #12
   d40f4:	bd30      	pop	{r4, r5, pc}
   d40f6:	bf00      	nop
   d40f8:	000d6e9c 	.word	0x000d6e9c
   d40fc:	000d6ea1 	.word	0x000d6ea1
   d4100:	2003e4c8 	.word	0x2003e4c8

000d4104 <_Z16DisplayFollowersPKc>:

void DisplayFollowers(const char *data){
   d4104:	b538      	push	{r3, r4, r5, lr}
  display.clearDisplay();
   d4106:	4c14      	ldr	r4, [pc, #80]	; (d4158 <_Z16DisplayFollowersPKc+0x54>)
{
  Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
  followers = data;
}

void DisplayFollowers(const char *data){
   d4108:	4605      	mov	r5, r0
  display.clearDisplay();
   d410a:	4620      	mov	r0, r4
   d410c:	f000 fe08 	bl	d4d20 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(2);
   d4110:	4620      	mov	r0, r4
   d4112:	2102      	movs	r1, #2
   d4114:	f000 fa82 	bl	d461c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(0,10);
   d4118:	220a      	movs	r2, #10
   d411a:	4620      	mov	r0, r4
   d411c:	2100      	movs	r1, #0
   d411e:	f000 fa7a 	bl	d4616 <_ZN12Adafruit_GFX9setCursorEss>
  display.println(F("Owel.codes"));
   d4122:	490e      	ldr	r1, [pc, #56]	; (d415c <_Z16DisplayFollowersPKc+0x58>)
   d4124:	4620      	mov	r0, r4
   d4126:	f001 fe0c 	bl	d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.setCursor(0,28);
   d412a:	221c      	movs	r2, #28
   d412c:	4620      	mov	r0, r4
   d412e:	2100      	movs	r1, #0
   d4130:	f000 fa71 	bl	d4616 <_ZN12Adafruit_GFX9setCursorEss>
  display.println(F("followers"));
   d4134:	490a      	ldr	r1, [pc, #40]	; (d4160 <_Z16DisplayFollowersPKc+0x5c>)
   d4136:	4620      	mov	r0, r4
   d4138:	f001 fe03 	bl	d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.setCursor(0,48);
   d413c:	4620      	mov	r0, r4
   d413e:	2230      	movs	r2, #48	; 0x30
   d4140:	2100      	movs	r1, #0
   d4142:	f000 fa68 	bl	d4616 <_ZN12Adafruit_GFX9setCursorEss>
  display.println(F(data));  
   d4146:	4629      	mov	r1, r5
   d4148:	4620      	mov	r0, r4
   d414a:	f001 fdfa 	bl	d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.display();
   d414e:	4620      	mov	r0, r4
}
   d4150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.println(F("Owel.codes"));
  display.setCursor(0,28);
  display.println(F("followers"));
  display.setCursor(0,48);
  display.println(F(data));  
  display.display();
   d4154:	f000 bd6e 	b.w	d4c34 <_ZN16Adafruit_SSD13067displayEv>
   d4158:	2003e4a4 	.word	0x2003e4a4
   d415c:	000d6eb2 	.word	0x000d6eb2
   d4160:	000d6ee9 	.word	0x000d6ee9

000d4164 <setup>:
}


// setup() runs once, when the device is first turned on.
void setup() {
   d4164:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d4166:	f002 fb55 	bl	d6814 <_Z16_fetch_usbserialv>
  Serial.println("This is Xenon device...");

  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR); // OLED_ADDR 0x3C
   d416a:	4c31      	ldr	r4, [pc, #196]	; (d4230 <setup+0xcc>)
}


// setup() runs once, when the device is first turned on.
void setup() {
  Serial.begin(9600);
   d416c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4170:	f002 fb44 	bl	d67fc <_ZN9USBSerial5beginEl>
  Serial.println("This is Xenon device...");
   d4174:	f002 fb4e 	bl	d6814 <_Z16_fetch_usbserialv>
   d4178:	492e      	ldr	r1, [pc, #184]	; (d4234 <setup+0xd0>)
   d417a:	f001 fdd8 	bl	d5d2e <_ZN5Print7printlnEPKc>

  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR); // OLED_ADDR 0x3C
   d417e:	223c      	movs	r2, #60	; 0x3c
   d4180:	2102      	movs	r1, #2
   d4182:	4620      	mov	r0, r4
   d4184:	f000 fc86 	bl	d4a94 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d4188:	4620      	mov	r0, r4
   d418a:	f000 fdc9 	bl	d4d20 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextColor(WHITE);
   d418e:	4620      	mov	r0, r4
   d4190:	2101      	movs	r1, #1
   d4192:	f000 fa48 	bl	d4626 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setTextSize(2);
   d4196:	4620      	mov	r0, r4
   d4198:	2102      	movs	r1, #2
   d419a:	f000 fa3f 	bl	d461c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(0,10);
   d419e:	220a      	movs	r2, #10
   d41a0:	4620      	mov	r0, r4
   d41a2:	2100      	movs	r1, #0
   d41a4:	f000 fa37 	bl	d4616 <_ZN12Adafruit_GFX9setCursorEss>
  display.println(F("Mesh"));
   d41a8:	4923      	ldr	r1, [pc, #140]	; (d4238 <setup+0xd4>)
   d41aa:	4620      	mov	r0, r4
   d41ac:	f001 fdc9 	bl	d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.setCursor(0,35);
   d41b0:	2223      	movs	r2, #35	; 0x23
   d41b2:	4620      	mov	r0, r4
   d41b4:	2100      	movs	r1, #0
   d41b6:	f000 fa2e 	bl	d4616 <_ZN12Adafruit_GFX9setCursorEss>
  display.println(F("Network"));
   d41ba:	4920      	ldr	r1, [pc, #128]	; (d423c <setup+0xd8>)
   d41bc:	4620      	mov	r0, r4
   d41be:	f001 fdc0 	bl	d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.display();
   d41c2:	4620      	mov	r0, r4
   d41c4:	f000 fd36 	bl	d4c34 <_ZN16Adafruit_SSD13067displayEv>
  delay(3000);
   d41c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d41cc:	f001 f890 	bl	d52f0 <delay>
  display.clearDisplay();
   d41d0:	4620      	mov	r0, r4
   d41d2:	f000 fda5 	bl	d4d20 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d41d6:	4620      	mov	r0, r4
   d41d8:	f000 fd2c 	bl	d4c34 <_ZN16Adafruit_SSD13067displayEv>

  // display IG text
  display.setTextSize(2);
   d41dc:	4620      	mov	r0, r4
   d41de:	2102      	movs	r1, #2
   d41e0:	f000 fa1c 	bl	d461c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(0,10);
   d41e4:	220a      	movs	r2, #10
   d41e6:	4620      	mov	r0, r4
   d41e8:	2100      	movs	r1, #0
   d41ea:	f000 fa14 	bl	d4616 <_ZN12Adafruit_GFX9setCursorEss>
  display.println(F("Owel.codes"));
   d41ee:	4914      	ldr	r1, [pc, #80]	; (d4240 <setup+0xdc>)
   d41f0:	4620      	mov	r0, r4
   d41f2:	f001 fda6 	bl	d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.setCursor(0,28);
   d41f6:	221c      	movs	r2, #28
   d41f8:	4620      	mov	r0, r4
   d41fa:	2100      	movs	r1, #0
   d41fc:	f000 fa0b 	bl	d4616 <_ZN12Adafruit_GFX9setCursorEss>
  display.println(F("followers"));
   d4200:	4910      	ldr	r1, [pc, #64]	; (d4244 <setup+0xe0>)
   d4202:	4620      	mov	r0, r4
   d4204:	f001 fd9d 	bl	d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.setCursor(0,50);
   d4208:	2232      	movs	r2, #50	; 0x32
   d420a:	4620      	mov	r0, r4
   d420c:	2100      	movs	r1, #0
   d420e:	f000 fa02 	bl	d4616 <_ZN12Adafruit_GFX9setCursorEss>
  display.println(F("6000"));  
   d4212:	490d      	ldr	r1, [pc, #52]	; (d4248 <setup+0xe4>)
   d4214:	4620      	mov	r0, r4
   d4216:	f001 fd94 	bl	d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.display();
   d421a:	4620      	mov	r0, r4
   d421c:	f000 fd0a 	bl	d4c34 <_ZN16Adafruit_SSD13067displayEv>

  // setup event listender and check if an event occured
  Mesh.subscribe("igfollowers", myHandler);
   d4220:	4a0a      	ldr	r2, [pc, #40]	; (d424c <setup+0xe8>)
   d4222:	490b      	ldr	r1, [pc, #44]	; (d4250 <setup+0xec>)
   d4224:	480b      	ldr	r0, [pc, #44]	; (d4254 <setup+0xf0>)
}
   d4226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setCursor(0,50);
  display.println(F("6000"));  
  display.display();

  // setup event listender and check if an event occured
  Mesh.subscribe("igfollowers", myHandler);
   d422a:	f001 bc63 	b.w	d5af4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d422e:	bf00      	nop
   d4230:	2003e4a4 	.word	0x2003e4a4
   d4234:	000d6ebd 	.word	0x000d6ebd
   d4238:	000d6ed5 	.word	0x000d6ed5
   d423c:	000d6eda 	.word	0x000d6eda
   d4240:	000d6eb2 	.word	0x000d6eb2
   d4244:	000d6ee9 	.word	0x000d6ee9
   d4248:	000d6ee2 	.word	0x000d6ee2
   d424c:	000d40d1 	.word	0x000d40d1
   d4250:	000d6ee7 	.word	0x000d6ee7
   d4254:	2003e4e4 	.word	0x2003e4e4

000d4258 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4258:	b508      	push	{r3, lr}
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d425a:	f000 fd7b 	bl	d4d54 <os_thread_yield>
  yield();
  DisplayFollowers(followers);
   d425e:	4b03      	ldr	r3, [pc, #12]	; (d426c <loop+0x14>)
   d4260:	6818      	ldr	r0, [r3, #0]
   d4262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  yield();
  DisplayFollowers(followers);
   d4266:	f7ff bf4d 	b.w	d4104 <_Z16DisplayFollowersPKc>
   d426a:	bf00      	nop
   d426c:	2003e4c8 	.word	0x2003e4c8

000d4270 <_ZN16Adafruit_SSD1306D0Ev>:
   d4270:	b510      	push	{r4, lr}
   d4272:	2124      	movs	r1, #36	; 0x24
   d4274:	4604      	mov	r4, r0
   d4276:	f002 fc1e 	bl	d6ab6 <_ZdlPvj>
   d427a:	4620      	mov	r0, r4
   d427c:	bd10      	pop	{r4, pc}
	...

000d4280 <_GLOBAL__sub_I_display>:
   d4280:	b510      	push	{r4, lr}
#define OLED_SDA D0
#define OLED_SCL D1
#define OLED_RESET -1
#define OLED_ADDR 0x3C
// Declaration for SSD1306 display connected using I2C, address of 0x3C
Adafruit_SSD1306 display(OLED_RESET);
   d4282:	4c07      	ldr	r4, [pc, #28]	; (d42a0 <_GLOBAL__sub_I_display+0x20>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4284:	f000 fdc6 	bl	d4e14 <HAL_Pin_Map>
   d4288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d428c:	4620      	mov	r0, r4
   d428e:	f000 fba9 	bl	d49e4 <_ZN16Adafruit_SSD1306C1Ea>
   d4292:	4620      	mov	r0, r4
   d4294:	4a03      	ldr	r2, [pc, #12]	; (d42a4 <_GLOBAL__sub_I_display+0x24>)
   d4296:	4904      	ldr	r1, [pc, #16]	; (d42a8 <_GLOBAL__sub_I_display+0x28>)

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  yield();
  DisplayFollowers(followers);
   d4298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define OLED_SDA D0
#define OLED_SCL D1
#define OLED_RESET -1
#define OLED_ADDR 0x3C
// Declaration for SSD1306 display connected using I2C, address of 0x3C
Adafruit_SSD1306 display(OLED_RESET);
   d429c:	f002 bc06 	b.w	d6aac <__aeabi_atexit>
   d42a0:	2003e4a4 	.word	0x2003e4a4
   d42a4:	2003e4a0 	.word	0x2003e4a0
   d42a8:	000d40cd 	.word	0x000d40cd

000d42ac <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d42ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42b0:	b085      	sub	sp, #20
   d42b2:	461e      	mov	r6, r3
   d42b4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d42b8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d42bc:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d42be:	1a9a      	subs	r2, r3, r2
   d42c0:	2a00      	cmp	r2, #0
   d42c2:	bfb8      	it	lt
   d42c4:	4252      	neglt	r2, r2
   d42c6:	9200      	str	r2, [sp, #0]
   d42c8:	1a72      	subs	r2, r6, r1
   d42ca:	2a00      	cmp	r2, #0
   d42cc:	bfb8      	it	lt
   d42ce:	4252      	neglt	r2, r2
   d42d0:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d42d2:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d42d4:	9a00      	ldr	r2, [sp, #0]
   d42d6:	9901      	ldr	r1, [sp, #4]
   d42d8:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d42da:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d42dc:	dd05      	ble.n	d42ea <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d42de:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d42e0:	461e      	mov	r6, r3
   d42e2:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d42e4:	4622      	mov	r2, r4
    swap(x0, y0);
   d42e6:	462c      	mov	r4, r5
   d42e8:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d42ea:	42b4      	cmp	r4, r6
   d42ec:	dd05      	ble.n	d42fa <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d42ee:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d42f0:	461d      	mov	r5, r3
   d42f2:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d42f4:	4622      	mov	r2, r4
   d42f6:	4634      	mov	r4, r6
   d42f8:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d42fa:	1b5a      	subs	r2, r3, r5
   d42fc:	2a00      	cmp	r2, #0
   d42fe:	bfb8      	it	lt
   d4300:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4302:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4306:	429d      	cmp	r5, r3
   d4308:	bfb4      	ite	lt
   d430a:	2301      	movlt	r3, #1
   d430c:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4310:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4314:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4316:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4318:	fa0f f788 	sxth.w	r7, r8
   d431c:	2202      	movs	r2, #2
   d431e:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4322:	42b4      	cmp	r4, r6
   d4324:	dc1f      	bgt.n	d4366 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4326:	9a01      	ldr	r2, [sp, #4]
   d4328:	9b00      	ldr	r3, [sp, #0]
   d432a:	4293      	cmp	r3, r2
   d432c:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4330:	bfc8      	it	gt
   d4332:	4622      	movgt	r2, r4
   d4334:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4338:	bfc8      	it	gt
   d433a:	4629      	movgt	r1, r5
   d433c:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d433e:	bfdc      	itt	le
   d4340:	462a      	movle	r2, r5
   d4342:	4621      	movle	r1, r4
   d4344:	4648      	mov	r0, r9
   d4346:	47d8      	blx	fp
    }
    err -= dy;
   d4348:	9b03      	ldr	r3, [sp, #12]
   d434a:	1aff      	subs	r7, r7, r3
   d434c:	b2bb      	uxth	r3, r7
   d434e:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4350:	2f00      	cmp	r7, #0
   d4352:	da05      	bge.n	d4360 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4354:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4356:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d435a:	4415      	add	r5, r2
   d435c:	b22d      	sxth	r5, r5
      err += dx;
   d435e:	b23f      	sxth	r7, r7
   d4360:	3401      	adds	r4, #1
   d4362:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4364:	e7dd      	b.n	d4322 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4366:	b005      	add	sp, #20
   d4368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d436c <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d436c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4370:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4374:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4376:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d437a:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d437c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d437e:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4380:	4691      	mov	r9, r2
   d4382:	460d      	mov	r5, r1
   d4384:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4386:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4388:	6823      	ldr	r3, [r4, #0]
   d438a:	9600      	str	r6, [sp, #0]
   d438c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d4390:	444a      	add	r2, r9
   d4392:	69df      	ldr	r7, [r3, #28]
   d4394:	4629      	mov	r1, r5
   d4396:	4643      	mov	r3, r8
   d4398:	4620      	mov	r0, r4
   d439a:	b212      	sxth	r2, r2
   d439c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d439e:	6823      	ldr	r3, [r4, #0]
   d43a0:	9600      	str	r6, [sp, #0]
   d43a2:	699f      	ldr	r7, [r3, #24]
   d43a4:	464a      	mov	r2, r9
   d43a6:	4653      	mov	r3, sl
   d43a8:	4629      	mov	r1, r5
   d43aa:	4620      	mov	r0, r4
   d43ac:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d43ae:	6823      	ldr	r3, [r4, #0]
   d43b0:	960a      	str	r6, [sp, #40]	; 0x28
   d43b2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   d43b6:	4429      	add	r1, r5
   d43b8:	699d      	ldr	r5, [r3, #24]
   d43ba:	464a      	mov	r2, r9
   d43bc:	4653      	mov	r3, sl
   d43be:	b209      	sxth	r1, r1
   d43c0:	4620      	mov	r0, r4
   d43c2:	46ac      	mov	ip, r5
}
   d43c4:	b002      	add	sp, #8
   d43c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d43ca:	4760      	bx	ip

000d43cc <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d43cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d43ce:	3b01      	subs	r3, #1
   d43d0:	4413      	add	r3, r2
   d43d2:	6804      	ldr	r4, [r0, #0]
   d43d4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d43d8:	9501      	str	r5, [sp, #4]
   d43da:	b21b      	sxth	r3, r3
   d43dc:	9300      	str	r3, [sp, #0]
   d43de:	6964      	ldr	r4, [r4, #20]
   d43e0:	460b      	mov	r3, r1
   d43e2:	47a0      	blx	r4
}
   d43e4:	b003      	add	sp, #12
   d43e6:	bd30      	pop	{r4, r5, pc}

000d43e8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d43e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d43ea:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d43ee:	6804      	ldr	r4, [r0, #0]
   d43f0:	e88d 0024 	stmia.w	sp, {r2, r5}
   d43f4:	3b01      	subs	r3, #1
   d43f6:	440b      	add	r3, r1
   d43f8:	6964      	ldr	r4, [r4, #20]
   d43fa:	b21b      	sxth	r3, r3
   d43fc:	47a0      	blx	r4
}
   d43fe:	b003      	add	sp, #12
   d4400:	bd30      	pop	{r4, r5, pc}

000d4402 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4402:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4406:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d440a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d440e:	4605      	mov	r5, r0
   d4410:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4412:	460c      	mov	r4, r1
   d4414:	eb01 0a03 	add.w	sl, r1, r3
   d4418:	4554      	cmp	r4, sl
   d441a:	da0b      	bge.n	d4434 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d441c:	682b      	ldr	r3, [r5, #0]
   d441e:	f8cd 9000 	str.w	r9, [sp]
   d4422:	699e      	ldr	r6, [r3, #24]
   d4424:	4621      	mov	r1, r4
   d4426:	4643      	mov	r3, r8
   d4428:	463a      	mov	r2, r7
   d442a:	4628      	mov	r0, r5
   d442c:	3401      	adds	r4, #1
   d442e:	47b0      	blx	r6
   d4430:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4432:	e7f1      	b.n	d4418 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4434:	b002      	add	sp, #8
   d4436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d443a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d443a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d443c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4440:	6804      	ldr	r4, [r0, #0]
   d4442:	9101      	str	r1, [sp, #4]
   d4444:	9200      	str	r2, [sp, #0]
   d4446:	2200      	movs	r2, #0
   d4448:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d444c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d444e:	4611      	mov	r1, r2
   d4450:	47a0      	blx	r4
}
   d4452:	b002      	add	sp, #8
   d4454:	bd10      	pop	{r4, pc}

000d4456 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4456:	4770      	bx	lr

000d4458 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4458:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d445a:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d445c:	2400      	movs	r4, #0
   d445e:	4d08      	ldr	r5, [pc, #32]	; (d4480 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4460:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4462:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4464:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4466:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d446a:	2201      	movs	r2, #1
   d446c:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d446e:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4470:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4472:	8204      	strh	r4, [r0, #16]
   d4474:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4476:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4478:	82c1      	strh	r1, [r0, #22]
   d447a:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d447c:	7682      	strb	r2, [r0, #26]
}
   d447e:	bd30      	pop	{r4, r5, pc}
   d4480:	000d6efc 	.word	0x000d6efc

000d4484 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4488:	b08f      	sub	sp, #60	; 0x3c
   d448a:	4605      	mov	r5, r0
   d448c:	9106      	str	r1, [sp, #24]
   d448e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4492:	9107      	str	r1, [sp, #28]
   d4494:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4498:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d449a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d449e:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d44a0:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d44a4:	4281      	cmp	r1, r0
   d44a6:	dd7c      	ble.n	d45a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d44a8:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d44ac:	4291      	cmp	r1, r2
   d44ae:	dd78      	ble.n	d45a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d44b0:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d44b2:	fb11 0008 	smlabb	r0, r1, r8, r0
   d44b6:	2800      	cmp	r0, #0
   d44b8:	dd73      	ble.n	d45a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d44ba:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d44be:	2800      	cmp	r0, #0
   d44c0:	dd6f      	ble.n	d45a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d44c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d44c6:	b296      	uxth	r6, r2
   d44c8:	930c      	str	r3, [sp, #48]	; 0x30
   d44ca:	f106 0308 	add.w	r3, r6, #8
   d44ce:	b29b      	uxth	r3, r3
   d44d0:	9109      	str	r1, [sp, #36]	; 0x24
   d44d2:	2400      	movs	r4, #0
   d44d4:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d44d6:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d44d8:	bf1c      	itt	ne
   d44da:	4b33      	ldrne	r3, [pc, #204]	; (d45a8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d44dc:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d44de:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d44e0:	bf16      	itet	ne
   d44e2:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d44e4:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d44e8:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d44ec:	9604      	str	r6, [sp, #16]
   d44ee:	fa1f f388 	uxth.w	r3, r8
   d44f2:	9303      	str	r3, [sp, #12]
   d44f4:	9a03      	ldr	r2, [sp, #12]
   d44f6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d44fa:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d44fe:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4502:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4504:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4506:	920a      	str	r2, [sp, #40]	; 0x28
   d4508:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d450a:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d450e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4510:	f019 0f01 	tst.w	r9, #1
   d4514:	d011      	beq.n	d453a <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4516:	f1b8 0f01 	cmp.w	r8, #1
   d451a:	682b      	ldr	r3, [r5, #0]
   d451c:	d103      	bne.n	d4526 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d451e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4522:	9b07      	ldr	r3, [sp, #28]
   d4524:	e014      	b.n	d4550 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4526:	9a07      	ldr	r2, [sp, #28]
   d4528:	9201      	str	r2, [sp, #4]
   d452a:	f8cd a000 	str.w	sl, [sp]
   d452e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4532:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4536:	4653      	mov	r3, sl
   d4538:	e018      	b.n	d456c <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d453a:	9b07      	ldr	r3, [sp, #28]
   d453c:	9a08      	ldr	r2, [sp, #32]
   d453e:	4293      	cmp	r3, r2
   d4540:	d017      	beq.n	d4572 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4542:	f1b8 0f01 	cmp.w	r8, #1
   d4546:	682b      	ldr	r3, [r5, #0]
   d4548:	d107      	bne.n	d455a <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d454a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d454e:	4613      	mov	r3, r2
   d4550:	b23a      	sxth	r2, r7
   d4552:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4554:	4628      	mov	r0, r5
   d4556:	47d8      	blx	fp
   d4558:	e00b      	b.n	d4572 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d455a:	9a08      	ldr	r2, [sp, #32]
   d455c:	9201      	str	r2, [sp, #4]
   d455e:	f8cd a000 	str.w	sl, [sp]
   d4562:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4566:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d456a:	4653      	mov	r3, sl
   d456c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d456e:	4628      	mov	r0, r5
   d4570:	47d8      	blx	fp
   d4572:	9b04      	ldr	r3, [sp, #16]
   d4574:	9a03      	ldr	r2, [sp, #12]
   d4576:	4413      	add	r3, r2
   d4578:	b29b      	uxth	r3, r3
   d457a:	9304      	str	r3, [sp, #16]
   d457c:	9b05      	ldr	r3, [sp, #20]
   d457e:	4413      	add	r3, r2
   d4580:	b29b      	uxth	r3, r3
   d4582:	3701      	adds	r7, #1
   d4584:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4588:	b2bf      	uxth	r7, r7
   d458a:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d458c:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4590:	d1be      	bne.n	d4510 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4592:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4594:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4596:	3401      	adds	r4, #1
   d4598:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d459c:	b264      	sxtb	r4, r4
   d459e:	9309      	str	r3, [sp, #36]	; 0x24
   d45a0:	d199      	bne.n	d44d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d45a2:	b00f      	add	sp, #60	; 0x3c
   d45a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d45a8:	000d6f2c 	.word	0x000d6f2c

000d45ac <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d45ac:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d45ae:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d45b0:	b085      	sub	sp, #20
   d45b2:	4604      	mov	r4, r0
   d45b4:	460b      	mov	r3, r1

  if (c == '\n') {
   d45b6:	d104      	bne.n	d45c2 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d45b8:	7e02      	ldrb	r2, [r0, #24]
   d45ba:	8a43      	ldrh	r3, [r0, #18]
   d45bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d45c0:	e023      	b.n	d460a <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d45c2:	290d      	cmp	r1, #13
   d45c4:	d024      	beq.n	d4610 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d45c6:	7e05      	ldrb	r5, [r0, #24]
   d45c8:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d45cc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d45d0:	9502      	str	r5, [sp, #8]
   d45d2:	8ac5      	ldrh	r5, [r0, #22]
   d45d4:	9501      	str	r5, [sp, #4]
   d45d6:	8a85      	ldrh	r5, [r0, #20]
   d45d8:	9500      	str	r5, [sp, #0]
   d45da:	f7ff ff53 	bl	d4484 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d45de:	7e22      	ldrb	r2, [r4, #24]
   d45e0:	8a23      	ldrh	r3, [r4, #16]
   d45e2:	b291      	uxth	r1, r2
   d45e4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d45e8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d45ec:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d45ee:	b21b      	sxth	r3, r3
   d45f0:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d45f2:	b168      	cbz	r0, d4610 <_ZN12Adafruit_GFX5writeEh+0x64>
   d45f4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d45f8:	f06f 0505 	mvn.w	r5, #5
   d45fc:	fb05 0202 	mla	r2, r5, r2, r0
   d4600:	4293      	cmp	r3, r2
   d4602:	dd05      	ble.n	d4610 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4604:	8a63      	ldrh	r3, [r4, #18]
   d4606:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d460a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d460c:	2300      	movs	r3, #0
   d460e:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4610:	2001      	movs	r0, #1
   d4612:	b005      	add	sp, #20
   d4614:	bd30      	pop	{r4, r5, pc}

000d4616 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4616:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4618:	8242      	strh	r2, [r0, #18]
   d461a:	4770      	bx	lr

000d461c <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d461c:	2900      	cmp	r1, #0
   d461e:	bf08      	it	eq
   d4620:	2101      	moveq	r1, #1
   d4622:	7601      	strb	r1, [r0, #24]
   d4624:	4770      	bx	lr

000d4626 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d4626:	82c1      	strh	r1, [r0, #22]
   d4628:	8281      	strh	r1, [r0, #20]
   d462a:	4770      	bx	lr

000d462c <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d462c:	7e40      	ldrb	r0, [r0, #25]
   d462e:	4770      	bx	lr

000d4630 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4630:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4634:	4770      	bx	lr

000d4636 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4636:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d463a:	4770      	bx	lr

000d463c <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d463c:	f000 bbea 	b.w	d4e14 <HAL_Pin_Map>

000d4640 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4640:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4642:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4644:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4648:	2c02      	cmp	r4, #2
   d464a:	d008      	beq.n	d465e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d464c:	2c03      	cmp	r4, #3
   d464e:	d00f      	beq.n	d4670 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4650:	2c01      	cmp	r4, #1
   d4652:	d170      	bne.n	d4736 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4654:	8904      	ldrh	r4, [r0, #8]
   d4656:	3c01      	subs	r4, #1
   d4658:	1aa2      	subs	r2, r4, r2
   d465a:	b212      	sxth	r2, r2
      break;
   d465c:	e00c      	b.n	d4678 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d465e:	8944      	ldrh	r4, [r0, #10]
   d4660:	3c01      	subs	r4, #1
   d4662:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4664:	8904      	ldrh	r4, [r0, #8]
   d4666:	1ae4      	subs	r4, r4, r3
   d4668:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d466a:	b212      	sxth	r2, r2
      x -= (w-1);
   d466c:	b209      	sxth	r1, r1
      break;
   d466e:	e062      	b.n	d4736 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4670:	8944      	ldrh	r4, [r0, #10]
   d4672:	1ae4      	subs	r4, r4, r3
   d4674:	1a61      	subs	r1, r4, r1
   d4676:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4678:	2a00      	cmp	r2, #0
   d467a:	db5b      	blt.n	d4734 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d467c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4680:	4294      	cmp	r4, r2
   d4682:	f340 8090 	ble.w	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4686:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4688:	bfbe      	ittt	lt
   d468a:	185b      	addlt	r3, r3, r1
   d468c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d468e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4690:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4694:	18cc      	adds	r4, r1, r3
   d4696:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4698:	bfc4      	itt	gt
   d469a:	1a43      	subgt	r3, r0, r1
   d469c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d469e:	2b00      	cmp	r3, #0
   d46a0:	f340 8081 	ble.w	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d46a4:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d46a6:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d46a8:	4f3f      	ldr	r7, [pc, #252]	; (d47a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d46aa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d46ae:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d46b2:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d46b4:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d46b8:	d017      	beq.n	d46ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d46ba:	f1c1 0108 	rsb	r1, r1, #8
   d46be:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d46c0:	493a      	ldr	r1, [pc, #232]	; (d47ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d46c2:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d46c4:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d46c6:	bf3f      	itttt	cc
   d46c8:	ebc3 0e00 	rsbcc	lr, r3, r0
   d46cc:	21ff      	movcc	r1, #255	; 0xff
   d46ce:	fa41 f10e 	asrcc.w	r1, r1, lr
   d46d2:	400e      	andcc	r6, r1
   d46d4:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d46d6:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d46d8:	bf0c      	ite	eq
   d46da:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d46dc:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d46de:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d46e0:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d46e2:	d360      	bcc.n	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d46e4:	1a18      	subs	r0, r3, r0
   d46e6:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d46e8:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d46ea:	2b07      	cmp	r3, #7
   d46ec:	d917      	bls.n	d471e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d46ee:	2d01      	cmp	r5, #1
   d46f0:	bf0c      	ite	eq
   d46f2:	20ff      	moveq	r0, #255	; 0xff
   d46f4:	2000      	movne	r0, #0
   d46f6:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d46fa:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d46fc:	3a08      	subs	r2, #8
   d46fe:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4700:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4702:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4706:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d470a:	d8f7      	bhi.n	d46fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d470c:	f1a3 0208 	sub.w	r2, r3, #8
   d4710:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4714:	3201      	adds	r2, #1
   d4716:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d471a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d471e:	2b00      	cmp	r3, #0
   d4720:	d041      	beq.n	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4722:	4a23      	ldr	r2, [pc, #140]	; (d47b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4724:	5cd2      	ldrb	r2, [r2, r3]
   d4726:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4728:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d472a:	bf0c      	ite	eq
   d472c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d472e:	4393      	bicne	r3, r2
   d4730:	7023      	strb	r3, [r4, #0]
   d4732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4734:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4736:	2a00      	cmp	r2, #0
   d4738:	db35      	blt.n	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d473a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d473e:	4294      	cmp	r4, r2
   d4740:	dd31      	ble.n	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4742:	2900      	cmp	r1, #0
    w += x;
   d4744:	bfbc      	itt	lt
   d4746:	18c9      	addlt	r1, r1, r3
   d4748:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d474a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d474e:	bfb8      	it	lt
   d4750:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4752:	18ce      	adds	r6, r1, r3
   d4754:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4756:	bfc4      	itt	gt
   d4758:	1a63      	subgt	r3, r4, r1
   d475a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d475c:	2b00      	cmp	r3, #0
   d475e:	dd22      	ble.n	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4760:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4762:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4766:	4810      	ldr	r0, [pc, #64]	; (d47a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4768:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d476c:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d476e:	2001      	movs	r0, #1
   d4770:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4774:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4776:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4778:	d109      	bne.n	d478e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d477a:	3b01      	subs	r3, #1
   d477c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d477e:	1c5c      	adds	r4, r3, #1
   d4780:	d011      	beq.n	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4782:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4786:	4310      	orrs	r0, r2
   d4788:	f801 0c01 	strb.w	r0, [r1, #-1]
   d478c:	e7f5      	b.n	d477a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d478e:	43d2      	mvns	r2, r2
   d4790:	b2d2      	uxtb	r2, r2
   d4792:	3b01      	subs	r3, #1
   d4794:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4796:	1c58      	adds	r0, r3, #1
   d4798:	d005      	beq.n	d47a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d479a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d479e:	4010      	ands	r0, r2
   d47a0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d47a4:	e7f5      	b.n	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d47a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47a8:	2003e038 	.word	0x2003e038
   d47ac:	2003e030 	.word	0x2003e030
   d47b0:	2003e028 	.word	0x2003e028

000d47b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d47b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d47b6:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d47b8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d47bc:	2c02      	cmp	r4, #2
   d47be:	d008      	beq.n	d47d2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d47c0:	2c03      	cmp	r4, #3
   d47c2:	d00f      	beq.n	d47e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d47c4:	2c01      	cmp	r4, #1
   d47c6:	d112      	bne.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d47c8:	8904      	ldrh	r4, [r0, #8]
   d47ca:	1ae4      	subs	r4, r4, r3
   d47cc:	1aa2      	subs	r2, r4, r2
   d47ce:	b212      	sxth	r2, r2
      break;
   d47d0:	e06d      	b.n	d48ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d47d2:	8904      	ldrh	r4, [r0, #8]
   d47d4:	3c01      	subs	r4, #1
   d47d6:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d47d8:	8944      	ldrh	r4, [r0, #10]
   d47da:	1ae4      	subs	r4, r4, r3
   d47dc:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d47de:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d47e0:	b212      	sxth	r2, r2
      break;
   d47e2:	e004      	b.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d47e4:	8944      	ldrh	r4, [r0, #10]
   d47e6:	3c01      	subs	r4, #1
   d47e8:	1a61      	subs	r1, r4, r1
   d47ea:	b209      	sxth	r1, r1
      break;
   d47ec:	e05f      	b.n	d48ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d47ee:	2900      	cmp	r1, #0
   d47f0:	db5c      	blt.n	d48ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d47f2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d47f6:	428c      	cmp	r4, r1
   d47f8:	f340 8091 	ble.w	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d47fc:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d47fe:	bfbc      	itt	lt
   d4800:	18d2      	addlt	r2, r2, r3
   d4802:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4804:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4808:	bfb8      	it	lt
   d480a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d480c:	18d4      	adds	r4, r2, r3
   d480e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4810:	bfc4      	itt	gt
   d4812:	1a83      	subgt	r3, r0, r2
   d4814:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4816:	2b00      	cmp	r3, #0
   d4818:	f340 8081 	ble.w	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d481c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d481e:	4e40      	ldr	r6, [pc, #256]	; (d4920 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4820:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4822:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4824:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4828:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d482c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4830:	d017      	beq.n	d4862 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4832:	f1c4 0408 	rsb	r4, r4, #8
   d4836:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4838:	4c3a      	ldr	r4, [pc, #232]	; (d4924 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d483a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d483c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d483e:	bf3f      	itttt	cc
   d4840:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4844:	24ff      	movcc	r4, #255	; 0xff
   d4846:	fa44 f40e 	asrcc.w	r4, r4, lr
   d484a:	4027      	andcc	r7, r4
   d484c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d484e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4850:	bf0c      	ite	eq
   d4852:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4854:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4856:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4858:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d485a:	d360      	bcc.n	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d485c:	1a10      	subs	r0, r2, r0
   d485e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4860:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4862:	2a07      	cmp	r2, #7
   d4864:	d917      	bls.n	d4896 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4866:	2d01      	cmp	r5, #1
   d4868:	bf0c      	ite	eq
   d486a:	24ff      	moveq	r4, #255	; 0xff
   d486c:	2400      	movne	r4, #0
   d486e:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4872:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4874:	3908      	subs	r1, #8
   d4876:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4878:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d487a:	f800 4c80 	strb.w	r4, [r0, #-128]
   d487e:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4882:	d8f7      	bhi.n	d4874 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4884:	f1a2 0108 	sub.w	r1, r2, #8
   d4888:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d488c:	3101      	adds	r1, #1
   d488e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4892:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4896:	2a00      	cmp	r2, #0
   d4898:	d041      	beq.n	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d489a:	4923      	ldr	r1, [pc, #140]	; (d4928 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d489c:	5c89      	ldrb	r1, [r1, r2]
   d489e:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d48a0:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d48a2:	bf0c      	ite	eq
   d48a4:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d48a6:	438a      	bicne	r2, r1
   d48a8:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d48aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d48ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d48ae:	2900      	cmp	r1, #0
   d48b0:	db35      	blt.n	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d48b2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d48b6:	428c      	cmp	r4, r1
   d48b8:	dd31      	ble.n	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d48ba:	2a00      	cmp	r2, #0
    w += x;
   d48bc:	bfbc      	itt	lt
   d48be:	18d2      	addlt	r2, r2, r3
   d48c0:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d48c2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d48c6:	bfb8      	it	lt
   d48c8:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d48ca:	18d6      	adds	r6, r2, r3
   d48cc:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d48ce:	bfc4      	itt	gt
   d48d0:	1aa3      	subgt	r3, r4, r2
   d48d2:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d48d4:	2b00      	cmp	r3, #0
   d48d6:	dd22      	ble.n	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d48d8:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d48da:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d48de:	4810      	ldr	r0, [pc, #64]	; (d4920 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d48e0:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d48e4:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d48e6:	2201      	movs	r2, #1
   d48e8:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d48ec:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d48ee:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d48f0:	d109      	bne.n	d4906 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d48f2:	1e5a      	subs	r2, r3, #1
   d48f4:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d48f6:	1c5c      	adds	r4, r3, #1
   d48f8:	d011      	beq.n	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d48fa:	f810 2b01 	ldrb.w	r2, [r0], #1
   d48fe:	430a      	orrs	r2, r1
   d4900:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4904:	e7f5      	b.n	d48f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d4906:	43c9      	mvns	r1, r1
   d4908:	b2c9      	uxtb	r1, r1
   d490a:	1e5a      	subs	r2, r3, #1
   d490c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d490e:	1c5a      	adds	r2, r3, #1
   d4910:	d005      	beq.n	d491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4912:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4916:	400a      	ands	r2, r1
   d4918:	f800 2c01 	strb.w	r2, [r0, #-1]
   d491c:	e7f5      	b.n	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4920:	2003e038 	.word	0x2003e038
   d4924:	2003e030 	.word	0x2003e030
   d4928:	2003e028 	.word	0x2003e028

000d492c <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>:
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d492c:	b410      	push	{r4}
  
  if(hwSPI) {
   d492e:	b12a      	cbz	r2, d493c <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x10>
    (void)SPI.transfer(d);
   d4930:	4619      	mov	r1, r3
   d4932:	4806      	ldr	r0, [pc, #24]	; (d494c <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x20>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
   d4934:	f85d 4b04 	ldr.w	r4, [sp], #4


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
   d4938:	f001 bb04 	b.w	d5f44 <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d493c:	2201      	movs	r2, #1
   d493e:	b2c9      	uxtb	r1, r1
   d4940:	b2c0      	uxtb	r0, r0
  }
}
   d4942:	f85d 4b04 	ldr.w	r4, [sp], #4
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4946:	f002 b84b 	b.w	d69e0 <shiftOut>
   d494a:	bf00      	nop
   d494c:	2003e72c 	.word	0x2003e72c

000d4950 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4952:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4954:	4606      	mov	r6, r0
   d4956:	4614      	mov	r4, r2
   d4958:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d495a:	db3f      	blt.n	d49dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d495c:	f7ff fe68 	bl	d4630 <_ZN12Adafruit_GFX5widthEv>
   d4960:	4285      	cmp	r5, r0
   d4962:	da3b      	bge.n	d49dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4964:	2c00      	cmp	r4, #0
   d4966:	db39      	blt.n	d49dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4968:	4630      	mov	r0, r6
   d496a:	f7ff fe64 	bl	d4636 <_ZN12Adafruit_GFX6heightEv>
   d496e:	4284      	cmp	r4, r0
   d4970:	da34      	bge.n	d49dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4972:	4630      	mov	r0, r6
   d4974:	f7ff fe5a 	bl	d462c <_ZN12Adafruit_GFX11getRotationEv>
   d4978:	2802      	cmp	r0, #2
   d497a:	d127      	bne.n	d49cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d497c:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d497e:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4980:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4982:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4984:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4986:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4988:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d498a:	b204      	sxth	r4, r0
   d498c:	e006      	b.n	d499c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d498e:	2801      	cmp	r0, #1
   d4990:	d104      	bne.n	d499c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4992:	8933      	ldrh	r3, [r6, #8]
   d4994:	3b01      	subs	r3, #1
   d4996:	1b1b      	subs	r3, r3, r4
   d4998:	462c      	mov	r4, r5
   d499a:	b21d      	sxth	r5, r3
   d499c:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d499e:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d49a0:	fb94 f0f0 	sdiv	r0, r4, r0
   d49a4:	b200      	sxth	r0, r0
   d49a6:	4b0e      	ldr	r3, [pc, #56]	; (d49e0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d49a8:	f004 0207 	and.w	r2, r4, #7
   d49ac:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d49b0:	d104      	bne.n	d49bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d49b2:	4097      	lsls	r7, r2
   d49b4:	5c5a      	ldrb	r2, [r3, r1]
   d49b6:	4317      	orrs	r7, r2
   d49b8:	545f      	strb	r7, [r3, r1]
   d49ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d49bc:	5c58      	ldrb	r0, [r3, r1]
   d49be:	2701      	movs	r7, #1
   d49c0:	fa07 f202 	lsl.w	r2, r7, r2
   d49c4:	ea20 0202 	bic.w	r2, r0, r2
   d49c8:	545a      	strb	r2, [r3, r1]
   d49ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d49cc:	2803      	cmp	r0, #3
   d49ce:	d1de      	bne.n	d498e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d49d0:	8973      	ldrh	r3, [r6, #10]
   d49d2:	3b01      	subs	r3, #1
   d49d4:	1b5b      	subs	r3, r3, r5
   d49d6:	4625      	mov	r5, r4
   d49d8:	b21c      	sxth	r4, r3
   d49da:	e7df      	b.n	d499c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d49dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d49de:	bf00      	nop
   d49e0:	2003e038 	.word	0x2003e038

000d49e4 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d49e4:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d49e6:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d49e8:	4604      	mov	r4, r0
   d49ea:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d49ec:	2180      	movs	r1, #128	; 0x80
   d49ee:	f7ff fd33 	bl	d4458 <_ZN12Adafruit_GFXC1Ess>
   d49f2:	4b06      	ldr	r3, [pc, #24]	; (d4a0c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d49f4:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d49f6:	23ff      	movs	r3, #255	; 0xff
   d49f8:	7763      	strb	r3, [r4, #29]
   d49fa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d49fe:	77e3      	strb	r3, [r4, #31]
   d4a00:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d4a02:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4a06:	4620      	mov	r0, r4
   d4a08:	bd38      	pop	{r3, r4, r5, pc}
   d4a0a:	bf00      	nop
   d4a0c:	000d7430 	.word	0x000d7430

000d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4a10:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4a12:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4a16:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4a18:	4604      	mov	r4, r0
   d4a1a:	460d      	mov	r5, r1
  if (sid != -1)
   d4a1c:	d022      	beq.n	d4a64 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4a1e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4a22:	2101      	movs	r1, #1
   d4a24:	b280      	uxth	r0, r0
   d4a26:	f001 ffc2 	bl	d69ae <digitalWrite>
    digitalWrite(dc, LOW);
   d4a2a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4a2e:	2100      	movs	r1, #0
   d4a30:	b280      	uxth	r0, r0
   d4a32:	f001 ffbc 	bl	d69ae <digitalWrite>
    digitalWrite(cs, LOW);
   d4a36:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a3a:	2100      	movs	r1, #0
   d4a3c:	b280      	uxth	r0, r0
   d4a3e:	f001 ffb6 	bl	d69ae <digitalWrite>
    fastSPIwrite(c);
   d4a42:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d4a46:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4a4a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d4a4e:	462b      	mov	r3, r5
   d4a50:	f7ff ff6c 	bl	d492c <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
   d4a54:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a58:	2101      	movs	r1, #1
   d4a5a:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4a60:	f001 bfa5 	b.w	d69ae <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4a64:	f001 ffe0 	bl	d6a28 <_Z19__fetch_global_Wirev>
   d4a68:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4a6c:	f000 fcdc 	bl	d5428 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4a70:	f001 ffda 	bl	d6a28 <_Z19__fetch_global_Wirev>
   d4a74:	6803      	ldr	r3, [r0, #0]
   d4a76:	2100      	movs	r1, #0
   d4a78:	689b      	ldr	r3, [r3, #8]
   d4a7a:	4798      	blx	r3
    Wire.write(c);
   d4a7c:	f001 ffd4 	bl	d6a28 <_Z19__fetch_global_Wirev>
   d4a80:	6803      	ldr	r3, [r0, #0]
   d4a82:	4629      	mov	r1, r5
   d4a84:	689b      	ldr	r3, [r3, #8]
   d4a86:	4798      	blx	r3
    Wire.endTransmission();
   d4a88:	f001 ffce 	bl	d6a28 <_Z19__fetch_global_Wirev>
  }
}
   d4a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4a90:	f000 bcd1 	b.w	d5436 <_ZN7TwoWire15endTransmissionEv>

000d4a94 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4a94:	b538      	push	{r3, r4, r5, lr}
   d4a96:	4604      	mov	r4, r0
   d4a98:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4a9a:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4a9c:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4aa0:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d4aa2:	3301      	adds	r3, #1
   d4aa4:	d033      	beq.n	d4b0e <_ZN16Adafruit_SSD13065beginEhh+0x7a>
    pinMode(dc, OUTPUT);
   d4aa6:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4aaa:	2101      	movs	r1, #1
   d4aac:	b280      	uxth	r0, r0
   d4aae:	f001 ff6d 	bl	d698c <pinMode>
    pinMode(cs, OUTPUT);
   d4ab2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4ab6:	2101      	movs	r1, #1
   d4ab8:	b280      	uxth	r0, r0
   d4aba:	f001 ff67 	bl	d698c <pinMode>
    if (!hwSPI){
   d4abe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4ac2:	b95b      	cbnz	r3, d4adc <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d4ac4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4ac8:	2101      	movs	r1, #1
   d4aca:	b280      	uxth	r0, r0
   d4acc:	f001 ff5e 	bl	d698c <pinMode>
    	pinMode(sclk, OUTPUT);
   d4ad0:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4ad4:	2101      	movs	r1, #1
   d4ad6:	b280      	uxth	r0, r0
   d4ad8:	f001 ff58 	bl	d698c <pinMode>
    	}
    if (hwSPI){
   d4adc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4ae0:	b1cb      	cbz	r3, d4b16 <_ZN16Adafruit_SSD13065beginEhh+0x82>
        digitalWrite(cs, HIGH);
   d4ae2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4ae6:	2101      	movs	r1, #1
   d4ae8:	b280      	uxth	r0, r0
   d4aea:	f001 ff60 	bl	d69ae <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d4aee:	2101      	movs	r1, #1
   d4af0:	484f      	ldr	r0, [pc, #316]	; (d4c30 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d4af2:	f001 f9c6 	bl	d5e82 <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d4af6:	2110      	movs	r1, #16
   d4af8:	484d      	ldr	r0, [pc, #308]	; (d4c30 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d4afa:	f001 fa0f 	bl	d5f1c <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d4afe:	2100      	movs	r1, #0
   d4b00:	484b      	ldr	r0, [pc, #300]	; (d4c30 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d4b02:	f001 f9c1 	bl	d5e88 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d4b06:	484a      	ldr	r0, [pc, #296]	; (d4c30 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d4b08:	f001 f9b6 	bl	d5e78 <_ZN8SPIClass5beginEv>
   d4b0c:	e003      	b.n	d4b16 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4b0e:	f001 ff8b 	bl	d6a28 <_Z19__fetch_global_Wirev>
   d4b12:	f000 fc7f 	bl	d5414 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4b16:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4b1a:	2101      	movs	r1, #1
   d4b1c:	b280      	uxth	r0, r0
   d4b1e:	f001 ff35 	bl	d698c <pinMode>
  digitalWrite(rst, HIGH);
   d4b22:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4b26:	2101      	movs	r1, #1
   d4b28:	b280      	uxth	r0, r0
   d4b2a:	f001 ff40 	bl	d69ae <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4b2e:	2001      	movs	r0, #1
   d4b30:	f000 fbde 	bl	d52f0 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4b34:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4b38:	2100      	movs	r1, #0
   d4b3a:	b280      	uxth	r0, r0
   d4b3c:	f001 ff37 	bl	d69ae <digitalWrite>
  // wait 10ms
  delay(10);
   d4b40:	200a      	movs	r0, #10
   d4b42:	f000 fbd5 	bl	d52f0 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4b46:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4b4a:	2101      	movs	r1, #1
   d4b4c:	b280      	uxth	r0, r0
   d4b4e:	f001 ff2e 	bl	d69ae <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4b52:	4620      	mov	r0, r4
   d4b54:	21ae      	movs	r1, #174	; 0xae
   d4b56:	f7ff ff5b 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	21d5      	movs	r1, #213	; 0xd5
   d4b5e:	f7ff ff57 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4b62:	4620      	mov	r0, r4
   d4b64:	2180      	movs	r1, #128	; 0x80
   d4b66:	f7ff ff53 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	21a8      	movs	r1, #168	; 0xa8
   d4b6e:	f7ff ff4f 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4b72:	4620      	mov	r0, r4
   d4b74:	213f      	movs	r1, #63	; 0x3f
   d4b76:	f7ff ff4b 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4b7a:	4620      	mov	r0, r4
   d4b7c:	21d3      	movs	r1, #211	; 0xd3
   d4b7e:	f7ff ff47 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4b82:	4620      	mov	r0, r4
   d4b84:	2100      	movs	r1, #0
   d4b86:	f7ff ff43 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	2140      	movs	r1, #64	; 0x40
   d4b8e:	f7ff ff3f 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4b92:	218d      	movs	r1, #141	; 0x8d
   d4b94:	4620      	mov	r0, r4
   d4b96:	f7ff ff3b 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4b9a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4b9c:	bf0c      	ite	eq
   d4b9e:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4ba0:	2114      	movne	r1, #20
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	f7ff ff34 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4ba8:	4620      	mov	r0, r4
   d4baa:	2120      	movs	r1, #32
   d4bac:	f7ff ff30 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	2100      	movs	r1, #0
   d4bb4:	f7ff ff2c 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4bb8:	4620      	mov	r0, r4
   d4bba:	21a1      	movs	r1, #161	; 0xa1
   d4bbc:	f7ff ff28 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	21c8      	movs	r1, #200	; 0xc8
   d4bc4:	f7ff ff24 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4bc8:	4620      	mov	r0, r4
   d4bca:	21da      	movs	r1, #218	; 0xda
   d4bcc:	f7ff ff20 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4bd0:	4620      	mov	r0, r4
   d4bd2:	2112      	movs	r1, #18
   d4bd4:	f7ff ff1c 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4bd8:	2181      	movs	r1, #129	; 0x81
   d4bda:	4620      	mov	r0, r4
   d4bdc:	f7ff ff18 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4be0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4be2:	bf0c      	ite	eq
   d4be4:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4be6:	21cf      	movne	r1, #207	; 0xcf
   d4be8:	4620      	mov	r0, r4
   d4bea:	f7ff ff11 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4bee:	21d9      	movs	r1, #217	; 0xd9
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	f7ff ff0d 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4bf6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4bf8:	bf0c      	ite	eq
   d4bfa:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d4bfc:	21f1      	movne	r1, #241	; 0xf1
   d4bfe:	4620      	mov	r0, r4
   d4c00:	f7ff ff06 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4c04:	4620      	mov	r0, r4
   d4c06:	21db      	movs	r1, #219	; 0xdb
   d4c08:	f7ff ff02 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	2140      	movs	r1, #64	; 0x40
   d4c10:	f7ff fefe 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4c14:	4620      	mov	r0, r4
   d4c16:	21a4      	movs	r1, #164	; 0xa4
   d4c18:	f7ff fefa 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	21a6      	movs	r1, #166	; 0xa6
   d4c20:	f7ff fef6 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4c24:	4620      	mov	r0, r4
   d4c26:	21af      	movs	r1, #175	; 0xaf
}
   d4c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4c2c:	f7ff bef0 	b.w	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
   d4c30:	2003e72c 	.word	0x2003e72c

000d4c34 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4c38:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4c3a:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4c3c:	f7ff fee8 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4c40:	2100      	movs	r1, #0
   d4c42:	4620      	mov	r0, r4
   d4c44:	f7ff fee4 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4c48:	217f      	movs	r1, #127	; 0x7f
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	f7ff fee0 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4c50:	2122      	movs	r1, #34	; 0x22
   d4c52:	4620      	mov	r0, r4
   d4c54:	f7ff fedc 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4c58:	2100      	movs	r1, #0
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	f7ff fed8 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4c60:	2107      	movs	r1, #7
   d4c62:	4620      	mov	r0, r4
   d4c64:	f7ff fed4 	bl	d4a10 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4c68:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4c6c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d4d1c <_ZN16Adafruit_SSD13067displayEv+0xe8>
   d4c70:	3301      	adds	r3, #1
   d4c72:	d02e      	beq.n	d4cd2 <_ZN16Adafruit_SSD13067displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4c74:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c78:	2101      	movs	r1, #1
   d4c7a:	b280      	uxth	r0, r0
   d4c7c:	f001 fe97 	bl	d69ae <digitalWrite>
    digitalWrite(dc, HIGH);
   d4c80:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4c84:	2101      	movs	r1, #1
   d4c86:	b280      	uxth	r0, r0
   d4c88:	f001 fe91 	bl	d69ae <digitalWrite>
    digitalWrite(cs, LOW);
   d4c8c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c90:	2100      	movs	r1, #0
   d4c92:	b280      	uxth	r0, r0
   d4c94:	f001 fe8b 	bl	d69ae <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4c98:	2001      	movs	r0, #1
   d4c9a:	f000 f8ab 	bl	d4df4 <HAL_Delay_Microseconds>
   d4c9e:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4ca0:	f818 3005 	ldrb.w	r3, [r8, r5]
   d4ca4:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d4ca8:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d4cac:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4cb0:	3501      	adds	r5, #1
   d4cb2:	f7ff fe3b 	bl	d492c <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4cb6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4cba:	d1f1      	bne.n	d4ca0 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4cbc:	2001      	movs	r0, #1
   d4cbe:	f000 f899 	bl	d4df4 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4cc2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4cc6:	2101      	movs	r1, #1
   d4cc8:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4cce:	f001 be6e 	b.w	d69ae <digitalWrite>
   d4cd2:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d4cd4:	f001 fea8 	bl	d6a28 <_Z19__fetch_global_Wirev>
   d4cd8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4cdc:	f000 fba4 	bl	d5428 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4ce0:	f001 fea2 	bl	d6a28 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4ce4:	6803      	ldr	r3, [r0, #0]
   d4ce6:	2140      	movs	r1, #64	; 0x40
   d4ce8:	689b      	ldr	r3, [r3, #8]
   d4cea:	4798      	blx	r3
   d4cec:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4cee:	f001 fe9b 	bl	d6a28 <_Z19__fetch_global_Wirev>
   d4cf2:	19af      	adds	r7, r5, r6
   d4cf4:	6803      	ldr	r3, [r0, #0]
   d4cf6:	b2bf      	uxth	r7, r7
   d4cf8:	689b      	ldr	r3, [r3, #8]
   d4cfa:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4cfe:	3601      	adds	r6, #1
   d4d00:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d4d02:	2e10      	cmp	r6, #16
   d4d04:	d1f3      	bne.n	d4cee <_ZN16Adafruit_SSD13067displayEv+0xba>
   d4d06:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4d08:	f001 fe8e 	bl	d6a28 <_Z19__fetch_global_Wirev>
   d4d0c:	b2ad      	uxth	r5, r5
   d4d0e:	f000 fb92 	bl	d5436 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4d12:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4d16:	d1dd      	bne.n	d4cd4 <_ZN16Adafruit_SSD13067displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d1c:	2003e038 	.word	0x2003e038

000d4d20 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4d24:	2100      	movs	r1, #0
   d4d26:	4801      	ldr	r0, [pc, #4]	; (d4d2c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4d28:	f002 b854 	b.w	d6dd4 <memset>
   d4d2c:	2003e038 	.word	0x2003e038

000d4d30 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4d30:	f000 b870 	b.w	d4e14 <HAL_Pin_Map>

000d4d34 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <os_thread_create+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	685b      	ldr	r3, [r3, #4]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030248 	.word	0x00030248

000d4d44 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <os_thread_is_current+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	689b      	ldr	r3, [r3, #8]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030248 	.word	0x00030248

000d4d54 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <os_thread_yield+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	68db      	ldr	r3, [r3, #12]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030248 	.word	0x00030248

000d4d64 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <os_thread_join+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	691b      	ldr	r3, [r3, #16]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030248 	.word	0x00030248

000d4d74 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <os_thread_cleanup+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	695b      	ldr	r3, [r3, #20]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030248 	.word	0x00030248

000d4d84 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <os_mutex_create+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030248 	.word	0x00030248

000d4d94 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <os_mutex_recursive_create+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030248 	.word	0x00030248

000d4da4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <os_mutex_recursive_lock+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030248 	.word	0x00030248

000d4db4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <os_mutex_recursive_unlock+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030248 	.word	0x00030248

000d4dc4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <os_thread_exit+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030248 	.word	0x00030248

000d4dd4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_RNG_GetRandomNumber+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	685b      	ldr	r3, [r3, #4]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030218 	.word	0x00030218

000d4de4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_Delay_Milliseconds+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	689b      	ldr	r3, [r3, #8]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030218 	.word	0x00030218

000d4df4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_Delay_Microseconds+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	68db      	ldr	r3, [r3, #12]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030218 	.word	0x00030218

000d4e04 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	695b      	ldr	r3, [r3, #20]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030218 	.word	0x00030218

000d4e14 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_Pin_Map+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	681b      	ldr	r3, [r3, #0]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	0003022c 	.word	0x0003022c

000d4e24 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_Pin_Mode+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	689b      	ldr	r3, [r3, #8]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	0003022c 	.word	0x0003022c

000d4e34 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_Get_Pin_Mode+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	68db      	ldr	r3, [r3, #12]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003022c 	.word	0x0003022c

000d4e44 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_GPIO_Write+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	691b      	ldr	r3, [r3, #16]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	0003022c 	.word	0x0003022c

000d4e54 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_I2C_Begin+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	68db      	ldr	r3, [r3, #12]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030228 	.word	0x00030228

000d4e64 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_I2C_Begin_Transmission+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	699b      	ldr	r3, [r3, #24]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030228 	.word	0x00030228

000d4e74 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_I2C_End_Transmission+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	69db      	ldr	r3, [r3, #28]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030228 	.word	0x00030228

000d4e84 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_I2C_Write_Data+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6a1b      	ldr	r3, [r3, #32]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030228 	.word	0x00030228

000d4e94 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_I2C_Available_Data+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030228 	.word	0x00030228

000d4ea4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_I2C_Read_Data+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030228 	.word	0x00030228

000d4eb4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_I2C_Peek_Data+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030228 	.word	0x00030228

000d4ec4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_I2C_Flush_Data+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030228 	.word	0x00030228

000d4ed4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_I2C_Is_Enabled+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030228 	.word	0x00030228

000d4ee4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <HAL_I2C_Init+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030228 	.word	0x00030228

000d4ef4 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <if_name_to_index+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	691b      	ldr	r3, [r3, #16]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	0003026c 	.word	0x0003026c

000d4f04 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <if_index_to_name+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	695b      	ldr	r3, [r3, #20]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003026c 	.word	0x0003026c

000d4f14 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <if_get_by_index+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	699b      	ldr	r3, [r3, #24]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	0003026c 	.word	0x0003026c

000d4f24 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <if_get_addrs+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003026c 	.word	0x0003026c

000d4f34 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <if_free_if_addrs+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	0003026c 	.word	0x0003026c

000d4f44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <inet_inet_ntop+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	695b      	ldr	r3, [r3, #20]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030264 	.word	0x00030264

000d4f54 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <inet_inet_pton+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	699b      	ldr	r3, [r3, #24]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030264 	.word	0x00030264

000d4f64 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <inet_htonl+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6a1b      	ldr	r3, [r3, #32]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030264 	.word	0x00030264

000d4f74 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <inet_ntohs+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030264 	.word	0x00030264

000d4f84 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <inet_htons+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030264 	.word	0x00030264

000d4f94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <netdb_freeaddrinfo+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	689b      	ldr	r3, [r3, #8]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030268 	.word	0x00030268

000d4fa4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <netdb_getaddrinfo+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	68db      	ldr	r3, [r3, #12]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030268 	.word	0x00030268

000d4fb4 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <sock_bind+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	685b      	ldr	r3, [r3, #4]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030238 	.word	0x00030238

000d4fc4 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <sock_setsockopt+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	699b      	ldr	r3, [r3, #24]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030238 	.word	0x00030238

000d4fd4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <sock_close+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	69db      	ldr	r3, [r3, #28]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030238 	.word	0x00030238

000d4fe4 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <sock_recvfrom+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030238 	.word	0x00030238

000d4ff4 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <sock_sendto+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030238 	.word	0x00030238

000d5004 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <sock_socket+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030238 	.word	0x00030238

000d5014 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_SPI_Begin+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	681b      	ldr	r3, [r3, #0]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030230 	.word	0x00030230

000d5024 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_SPI_Set_Bit_Order+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	689b      	ldr	r3, [r3, #8]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030230 	.word	0x00030230

000d5034 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_SPI_Set_Data_Mode+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	68db      	ldr	r3, [r3, #12]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030230 	.word	0x00030230

000d5044 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	691b      	ldr	r3, [r3, #16]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030230 	.word	0x00030230

000d5054 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_SPI_Send_Receive_Data+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	695b      	ldr	r3, [r3, #20]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030230 	.word	0x00030230

000d5064 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_SPI_Init+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	69db      	ldr	r3, [r3, #28]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030230 	.word	0x00030230

000d5074 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_SPI_Is_Enabled+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6a1b      	ldr	r3, [r3, #32]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030230 	.word	0x00030230

000d5084 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_SPI_Info+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030230 	.word	0x00030230

000d5094 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_USART_Init+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	681b      	ldr	r3, [r3, #0]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	0003023c 	.word	0x0003023c

000d50a4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_USART_Write_Data+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	68db      	ldr	r3, [r3, #12]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003023c 	.word	0x0003023c

000d50b4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_USART_Available_Data+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	691b      	ldr	r3, [r3, #16]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003023c 	.word	0x0003023c

000d50c4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_USART_Read_Data+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	695b      	ldr	r3, [r3, #20]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	0003023c 	.word	0x0003023c

000d50d4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_USART_Peek_Data+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	699b      	ldr	r3, [r3, #24]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	0003023c 	.word	0x0003023c

000d50e4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <HAL_USART_Flush_Data+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	69db      	ldr	r3, [r3, #28]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	0003023c 	.word	0x0003023c

000d50f4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <HAL_USART_Is_Enabled+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6a1b      	ldr	r3, [r3, #32]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	0003023c 	.word	0x0003023c

000d5104 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <HAL_USART_Available_Data_For_Write+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003023c 	.word	0x0003023c

000d5114 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <HAL_USB_USART_Init+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	681b      	ldr	r3, [r3, #0]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003024c 	.word	0x0003024c

000d5124 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <HAL_USB_USART_Begin+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	685b      	ldr	r3, [r3, #4]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003024c 	.word	0x0003024c

000d5134 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <HAL_USB_USART_Available_Data+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	691b      	ldr	r3, [r3, #16]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003024c 	.word	0x0003024c

000d5144 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	695b      	ldr	r3, [r3, #20]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003024c 	.word	0x0003024c

000d5154 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <HAL_USB_USART_Receive_Data+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	699b      	ldr	r3, [r3, #24]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003024c 	.word	0x0003024c

000d5164 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_USB_USART_Send_Data+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	69db      	ldr	r3, [r3, #28]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003024c 	.word	0x0003024c

000d5174 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_USB_USART_Flush_Data+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6a1b      	ldr	r3, [r3, #32]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003024c 	.word	0x0003024c

000d5184 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <panic_+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	00030260 	.word	0x00030260

000d5194 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <log_message+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	00030260 	.word	0x00030260

000d51a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <set_system_mode+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	685b      	ldr	r3, [r3, #4]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030220 	.word	0x00030220

000d51b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <system_delay_ms+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	695b      	ldr	r3, [r3, #20]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030220 	.word	0x00030220

000d51c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b03      	ldr	r3, [pc, #12]	; (d51d4 <system_ctrl_set_app_request_handler+0x10>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d51ce:	9301      	str	r3, [sp, #4]
   d51d0:	bd08      	pop	{r3, pc}
   d51d2:	0000      	.short	0x0000
   d51d4:	00030220 	.word	0x00030220

000d51d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b03      	ldr	r3, [pc, #12]	; (d51e8 <system_ctrl_set_result+0x10>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d51e2:	9301      	str	r3, [sp, #4]
   d51e4:	bd08      	pop	{r3, pc}
   d51e6:	0000      	.short	0x0000
   d51e8:	00030220 	.word	0x00030220

000d51ec <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b03      	ldr	r3, [pc, #12]	; (d51fc <system_invoke_event_handler+0x10>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d51f6:	9301      	str	r3, [sp, #4]
   d51f8:	bd08      	pop	{r3, pc}
   d51fa:	0000      	.short	0x0000
   d51fc:	00030220 	.word	0x00030220

000d5200 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030244 	.word	0x00030244

000d5210 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <network_connect+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	685b      	ldr	r3, [r3, #4]
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030240 	.word	0x00030240

000d5220 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <network_connecting+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	689b      	ldr	r3, [r3, #8]
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030240 	.word	0x00030240

000d5230 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <network_disconnect+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	68db      	ldr	r3, [r3, #12]
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030240 	.word	0x00030240

000d5240 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <network_ready+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	691b      	ldr	r3, [r3, #16]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	00030240 	.word	0x00030240

000d5250 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <network_on+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	695b      	ldr	r3, [r3, #20]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	00030240 	.word	0x00030240

000d5260 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <network_off+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	699b      	ldr	r3, [r3, #24]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	00030240 	.word	0x00030240

000d5270 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <network_listen+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	69db      	ldr	r3, [r3, #28]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	00030240 	.word	0x00030240

000d5280 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <network_listening+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	6a1b      	ldr	r3, [r3, #32]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	00030240 	.word	0x00030240

000d5290 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <network_set_listen_timeout+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	00030240 	.word	0x00030240

000d52a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <network_get_listen_timeout+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	00030240 	.word	0x00030240

000d52b0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <malloc+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	681b      	ldr	r3, [r3, #0]
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	0003021c 	.word	0x0003021c

000d52c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <free+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	685b      	ldr	r3, [r3, #4]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	0003021c 	.word	0x0003021c

000d52d0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <vsnprintf+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	0003021c 	.word	0x0003021c

000d52e0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <abort+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	0003021c 	.word	0x0003021c

000d52f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d52f0:	2100      	movs	r1, #0
   d52f2:	f7ff bf5f 	b.w	d51b4 <system_delay_ms>
	...

000d52f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d52f8:	4802      	ldr	r0, [pc, #8]	; (d5304 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d52fa:	2300      	movs	r3, #0
   d52fc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d52fe:	f7ff bd49 	b.w	d4d94 <os_mutex_recursive_create>
   d5302:	bf00      	nop
   d5304:	2003e4cc 	.word	0x2003e4cc

000d5308 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5308:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d530a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d530c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d530e:	b113      	cbz	r3, d5316 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5310:	2203      	movs	r2, #3
   d5312:	4601      	mov	r1, r0
   d5314:	4798      	blx	r3
    }
   d5316:	4620      	mov	r0, r4
   d5318:	bd10      	pop	{r4, pc}

000d531a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d531a:	2200      	movs	r2, #0
   d531c:	4611      	mov	r1, r2
   d531e:	6840      	ldr	r0, [r0, #4]
   d5320:	f7ff bfae 	b.w	d5280 <network_listening>

000d5324 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5324:	2200      	movs	r2, #0
   d5326:	4611      	mov	r1, r2
   d5328:	6840      	ldr	r0, [r0, #4]
   d532a:	f7ff bfb9 	b.w	d52a0 <network_get_listen_timeout>

000d532e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d532e:	2200      	movs	r2, #0
   d5330:	6840      	ldr	r0, [r0, #4]
   d5332:	f7ff bfad 	b.w	d5290 <network_set_listen_timeout>

000d5336 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5336:	2200      	movs	r2, #0
   d5338:	f081 0101 	eor.w	r1, r1, #1
   d533c:	6840      	ldr	r0, [r0, #4]
   d533e:	f7ff bf97 	b.w	d5270 <network_listen>

000d5342 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5342:	2300      	movs	r3, #0
   d5344:	461a      	mov	r2, r3
   d5346:	4619      	mov	r1, r3
   d5348:	6840      	ldr	r0, [r0, #4]
   d534a:	f7ff bf89 	b.w	d5260 <network_off>

000d534e <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d534e:	2300      	movs	r3, #0
   d5350:	461a      	mov	r2, r3
   d5352:	4619      	mov	r1, r3
   d5354:	6840      	ldr	r0, [r0, #4]
   d5356:	f7ff bf7b 	b.w	d5250 <network_on>

000d535a <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d535a:	2200      	movs	r2, #0
   d535c:	4611      	mov	r1, r2
   d535e:	6840      	ldr	r0, [r0, #4]
   d5360:	f7ff bf6e 	b.w	d5240 <network_ready>

000d5364 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5364:	2200      	movs	r2, #0
   d5366:	4611      	mov	r1, r2
   d5368:	6840      	ldr	r0, [r0, #4]
   d536a:	f7ff bf59 	b.w	d5220 <network_connecting>

000d536e <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d536e:	2200      	movs	r2, #0
   d5370:	2102      	movs	r1, #2
   d5372:	6840      	ldr	r0, [r0, #4]
   d5374:	f7ff bf5c 	b.w	d5230 <network_disconnect>

000d5378 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5378:	2300      	movs	r3, #0
   d537a:	461a      	mov	r2, r3
   d537c:	6840      	ldr	r0, [r0, #4]
   d537e:	f7ff bf47 	b.w	d5210 <network_connect>
	...

000d5384 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5384:	4b02      	ldr	r3, [pc, #8]	; (d5390 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5386:	2203      	movs	r2, #3
   d5388:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d538a:	4a02      	ldr	r2, [pc, #8]	; (d5394 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d538c:	601a      	str	r2, [r3, #0]
   d538e:	4770      	bx	lr
   d5390:	2003e4d0 	.word	0x2003e4d0
   d5394:	000d7468 	.word	0x000d7468

000d5398 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5398:	4770      	bx	lr

000d539a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d539c:	4606      	mov	r6, r0
   d539e:	4615      	mov	r5, r2
   d53a0:	460c      	mov	r4, r1
   d53a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53a4:	42bc      	cmp	r4, r7
   d53a6:	d006      	beq.n	d53b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53a8:	6833      	ldr	r3, [r6, #0]
   d53aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53ae:	689b      	ldr	r3, [r3, #8]
   d53b0:	4630      	mov	r0, r6
   d53b2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53b4:	e7f6      	b.n	d53a4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d53b6:	4628      	mov	r0, r5
   d53b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53ba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d53ba:	2200      	movs	r2, #0
   d53bc:	7c00      	ldrb	r0, [r0, #16]
   d53be:	f7ff bd61 	b.w	d4e84 <HAL_I2C_Write_Data>

000d53c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d53c2:	2100      	movs	r1, #0
   d53c4:	7c00      	ldrb	r0, [r0, #16]
   d53c6:	f7ff bd65 	b.w	d4e94 <HAL_I2C_Available_Data>

000d53ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d53ca:	2100      	movs	r1, #0
   d53cc:	7c00      	ldrb	r0, [r0, #16]
   d53ce:	f7ff bd69 	b.w	d4ea4 <HAL_I2C_Read_Data>

000d53d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d53d2:	2100      	movs	r1, #0
   d53d4:	7c00      	ldrb	r0, [r0, #16]
   d53d6:	f7ff bd6d 	b.w	d4eb4 <HAL_I2C_Peek_Data>

000d53da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d53da:	2100      	movs	r1, #0
   d53dc:	7c00      	ldrb	r0, [r0, #16]
   d53de:	f7ff bd71 	b.w	d4ec4 <HAL_I2C_Flush_Data>

000d53e2 <_ZN7TwoWireD0Ev>:
   d53e2:	b510      	push	{r4, lr}
   d53e4:	2114      	movs	r1, #20
   d53e6:	4604      	mov	r4, r0
   d53e8:	f001 fb65 	bl	d6ab6 <_ZdlPvj>
   d53ec:	4620      	mov	r0, r4
   d53ee:	bd10      	pop	{r4, pc}

000d53f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d53f0:	b510      	push	{r4, lr}
   d53f2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d53f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53f8:	4608      	mov	r0, r1
   d53fa:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d53fc:	2100      	movs	r1, #0
   d53fe:	4b04      	ldr	r3, [pc, #16]	; (d5410 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5400:	7420      	strb	r0, [r4, #16]
   d5402:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5404:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5406:	f7ff fd6d 	bl	d4ee4 <HAL_I2C_Init>

}
   d540a:	4620      	mov	r0, r4
   d540c:	bd10      	pop	{r4, pc}
   d540e:	bf00      	nop
   d5410:	000d749c 	.word	0x000d749c

000d5414 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5414:	2300      	movs	r3, #0
   d5416:	461a      	mov	r2, r3
   d5418:	4619      	mov	r1, r3
   d541a:	7c00      	ldrb	r0, [r0, #16]
   d541c:	f7ff bd1a 	b.w	d4e54 <HAL_I2C_Begin>

000d5420 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5420:	2200      	movs	r2, #0
   d5422:	7c00      	ldrb	r0, [r0, #16]
   d5424:	f7ff bd1e 	b.w	d4e64 <HAL_I2C_Begin_Transmission>

000d5428 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5428:	b2c9      	uxtb	r1, r1
   d542a:	f7ff bff9 	b.w	d5420 <_ZN7TwoWire17beginTransmissionEh>

000d542e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d542e:	2200      	movs	r2, #0
   d5430:	7c00      	ldrb	r0, [r0, #16]
   d5432:	f7ff bd1f 	b.w	d4e74 <HAL_I2C_End_Transmission>

000d5436 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5436:	2101      	movs	r1, #1
   d5438:	f7ff bff9 	b.w	d542e <_ZN7TwoWire15endTransmissionEh>

000d543c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d543c:	2100      	movs	r1, #0
   d543e:	7c00      	ldrb	r0, [r0, #16]
   d5440:	f7ff bd48 	b.w	d4ed4 <HAL_I2C_Is_Enabled>

000d5444 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5444:	4770      	bx	lr

000d5446 <_ZN9IPAddressD0Ev>:
   d5446:	b510      	push	{r4, lr}
   d5448:	2118      	movs	r1, #24
   d544a:	4604      	mov	r4, r0
   d544c:	f001 fb33 	bl	d6ab6 <_ZdlPvj>
   d5450:	4620      	mov	r0, r4
   d5452:	bd10      	pop	{r4, pc}

000d5454 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5454:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5456:	7d03      	ldrb	r3, [r0, #20]
   d5458:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d545a:	b08d      	sub	sp, #52	; 0x34
   d545c:	460e      	mov	r6, r1
   d545e:	f100 0704 	add.w	r7, r0, #4
   d5462:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5466:	d002      	beq.n	d546e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5468:	f100 0508 	add.w	r5, r0, #8
   d546c:	e018      	b.n	d54a0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d546e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5470:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5472:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5476:	232f      	movs	r3, #47	; 0x2f
   d5478:	462a      	mov	r2, r5
   d547a:	200a      	movs	r0, #10
   d547c:	f7ff fd62 	bl	d4f44 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5480:	4628      	mov	r0, r5
   d5482:	f001 fcd7 	bl	d6e34 <strlen>
   d5486:	6833      	ldr	r3, [r6, #0]
   d5488:	4602      	mov	r2, r0
   d548a:	68db      	ldr	r3, [r3, #12]
   d548c:	4629      	mov	r1, r5
   d548e:	4630      	mov	r0, r6
   d5490:	4798      	blx	r3
   d5492:	e00f      	b.n	d54b4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5494:	b124      	cbz	r4, d54a0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5496:	212e      	movs	r1, #46	; 0x2e
   d5498:	4630      	mov	r0, r6
   d549a:	f000 fc39 	bl	d5d10 <_ZN5Print5printEc>
   d549e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d54a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54a4:	220a      	movs	r2, #10
   d54a6:	4630      	mov	r0, r6
   d54a8:	f000 fc7a 	bl	d5da0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54ac:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54ae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54b0:	d1f0      	bne.n	d5494 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54b2:	4620      	mov	r0, r4
    }
    return n;
}
   d54b4:	b00d      	add	sp, #52	; 0x34
   d54b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54b8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d54b8:	b510      	push	{r4, lr}
   d54ba:	4b05      	ldr	r3, [pc, #20]	; (d54d0 <_ZN9IPAddressC1Ev+0x18>)
   d54bc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54be:	2211      	movs	r2, #17
   d54c0:	f840 3b04 	str.w	r3, [r0], #4
   d54c4:	2100      	movs	r1, #0
   d54c6:	f001 fc85 	bl	d6dd4 <memset>
{
    clear();
}
   d54ca:	4620      	mov	r0, r4
   d54cc:	bd10      	pop	{r4, pc}
   d54ce:	bf00      	nop
   d54d0:	000d74c4 	.word	0x000d74c4

000d54d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d54d4:	4603      	mov	r3, r0
   d54d6:	4a07      	ldr	r2, [pc, #28]	; (d54f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d54d8:	b510      	push	{r4, lr}
   d54da:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d54de:	f101 0210 	add.w	r2, r1, #16
   d54e2:	f851 4b04 	ldr.w	r4, [r1], #4
   d54e6:	f843 4b04 	str.w	r4, [r3], #4
   d54ea:	4291      	cmp	r1, r2
   d54ec:	d1f9      	bne.n	d54e2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d54ee:	780a      	ldrb	r2, [r1, #0]
   d54f0:	701a      	strb	r2, [r3, #0]
}
   d54f2:	bd10      	pop	{r4, pc}
   d54f4:	000d74c4 	.word	0x000d74c4

000d54f8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d54f8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d54fa:	2b04      	cmp	r3, #4
   d54fc:	d101      	bne.n	d5502 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d54fe:	6840      	ldr	r0, [r0, #4]
   d5500:	e008      	b.n	d5514 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5502:	2b06      	cmp	r3, #6
   d5504:	d10a      	bne.n	d551c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5506:	6843      	ldr	r3, [r0, #4]
   d5508:	b953      	cbnz	r3, d5520 <_ZNK9IPAddresscvbEv+0x28>
   d550a:	6883      	ldr	r3, [r0, #8]
   d550c:	b943      	cbnz	r3, d5520 <_ZNK9IPAddresscvbEv+0x28>
   d550e:	68c3      	ldr	r3, [r0, #12]
   d5510:	b933      	cbnz	r3, d5520 <_ZNK9IPAddresscvbEv+0x28>
   d5512:	6900      	ldr	r0, [r0, #16]
   d5514:	3000      	adds	r0, #0
   d5516:	bf18      	it	ne
   d5518:	2001      	movne	r0, #1
   d551a:	4770      	bx	lr
    } else {
        return false;
   d551c:	2000      	movs	r0, #0
   d551e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5520:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5522:	4770      	bx	lr

000d5524 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5524:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5526:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d552a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d552e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5532:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5536:	2304      	movs	r3, #4
   d5538:	6041      	str	r1, [r0, #4]
   d553a:	7503      	strb	r3, [r0, #20]
   d553c:	bd10      	pop	{r4, pc}

000d553e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d553e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5540:	780d      	ldrb	r5, [r1, #0]
   d5542:	788b      	ldrb	r3, [r1, #2]
   d5544:	784a      	ldrb	r2, [r1, #1]
   d5546:	78c9      	ldrb	r1, [r1, #3]
   d5548:	9100      	str	r1, [sp, #0]
   d554a:	4629      	mov	r1, r5
   d554c:	f7ff ffea 	bl	d5524 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5550:	b003      	add	sp, #12
   d5552:	bd30      	pop	{r4, r5, pc}

000d5554 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5554:	6800      	ldr	r0, [r0, #0]
   d5556:	f7ff bc25 	b.w	d4da4 <os_mutex_recursive_lock>
	...

000d555c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d555c:	4b01      	ldr	r3, [pc, #4]	; (d5564 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d555e:	4a02      	ldr	r2, [pc, #8]	; (d5568 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5560:	601a      	str	r2, [r3, #0]
   d5562:	4770      	bx	lr
   d5564:	2003e4d8 	.word	0x2003e4d8
   d5568:	000d7543 	.word	0x000d7543

000d556c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d556c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d556e:	2301      	movs	r3, #1
   d5570:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d5572:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5574:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d5576:	b10b      	cbz	r3, d557c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d5578:	68c0      	ldr	r0, [r0, #12]
   d557a:	e006      	b.n	d558a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d557c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d557e:	b128      	cbz	r0, d558c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5580:	6883      	ldr	r3, [r0, #8]
   d5582:	b90b      	cbnz	r3, d5588 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d5584:	f001 fab3 	bl	d6aee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5588:	68c3      	ldr	r3, [r0, #12]
   d558a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d558c:	2301      	movs	r3, #1
   d558e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5590:	2000      	movs	r0, #0
    }
   d5592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d5596:	f7ff bc15 	b.w	d4dc4 <os_thread_exit>

000d559a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d559a:	2200      	movs	r2, #0
   d559c:	4611      	mov	r1, r2
   d559e:	6840      	ldr	r0, [r0, #4]
   d55a0:	f7ff be6e 	b.w	d5280 <network_listening>

000d55a4 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55a4:	2200      	movs	r2, #0
   d55a6:	4611      	mov	r1, r2
   d55a8:	6840      	ldr	r0, [r0, #4]
   d55aa:	f7ff be79 	b.w	d52a0 <network_get_listen_timeout>

000d55ae <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55ae:	2200      	movs	r2, #0
   d55b0:	6840      	ldr	r0, [r0, #4]
   d55b2:	f7ff be6d 	b.w	d5290 <network_set_listen_timeout>

000d55b6 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55b6:	2200      	movs	r2, #0
   d55b8:	f081 0101 	eor.w	r1, r1, #1
   d55bc:	6840      	ldr	r0, [r0, #4]
   d55be:	f7ff be57 	b.w	d5270 <network_listen>

000d55c2 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d55c2:	2300      	movs	r3, #0
   d55c4:	461a      	mov	r2, r3
   d55c6:	2101      	movs	r1, #1
   d55c8:	6840      	ldr	r0, [r0, #4]
   d55ca:	f7ff be49 	b.w	d5260 <network_off>

000d55ce <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55ce:	2300      	movs	r3, #0
   d55d0:	461a      	mov	r2, r3
   d55d2:	4619      	mov	r1, r3
   d55d4:	6840      	ldr	r0, [r0, #4]
   d55d6:	f7ff be3b 	b.w	d5250 <network_on>

000d55da <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55da:	2200      	movs	r2, #0
   d55dc:	4611      	mov	r1, r2
   d55de:	6840      	ldr	r0, [r0, #4]
   d55e0:	f7ff be2e 	b.w	d5240 <network_ready>

000d55e4 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55e4:	2200      	movs	r2, #0
   d55e6:	4611      	mov	r1, r2
   d55e8:	6840      	ldr	r0, [r0, #4]
   d55ea:	f7ff be19 	b.w	d5220 <network_connecting>

000d55ee <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55ee:	2200      	movs	r2, #0
   d55f0:	2102      	movs	r1, #2
   d55f2:	6840      	ldr	r0, [r0, #4]
   d55f4:	f7ff be1c 	b.w	d5230 <network_disconnect>

000d55f8 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55f8:	2300      	movs	r3, #0
   d55fa:	461a      	mov	r2, r3
   d55fc:	6840      	ldr	r0, [r0, #4]
   d55fe:	f7ff be07 	b.w	d5210 <network_connect>

000d5602 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5602:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5604:	4605      	mov	r5, r0
   d5606:	b188      	cbz	r0, d562c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5608:	6804      	ldr	r4, [r0, #0]
   d560a:	b14c      	cbz	r4, d5620 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d560c:	68a3      	ldr	r3, [r4, #8]
   d560e:	b11b      	cbz	r3, d5618 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5610:	2203      	movs	r2, #3
   d5612:	4621      	mov	r1, r4
   d5614:	4620      	mov	r0, r4
   d5616:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5618:	2110      	movs	r1, #16
   d561a:	4620      	mov	r0, r4
   d561c:	f001 fa4b 	bl	d6ab6 <_ZdlPvj>
   d5620:	4628      	mov	r0, r5
   d5622:	2114      	movs	r1, #20
      }
   d5624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5628:	f001 ba45 	b.w	d6ab6 <_ZdlPvj>
   d562c:	bd38      	pop	{r3, r4, r5, pc}

000d562e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d562e:	b110      	cbz	r0, d5636 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5630:	6803      	ldr	r3, [r0, #0]
   d5632:	685b      	ldr	r3, [r3, #4]
   d5634:	4718      	bx	r3
   d5636:	4770      	bx	lr

000d5638 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5638:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d563a:	6803      	ldr	r3, [r0, #0]
   d563c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d563e:	b1bb      	cbz	r3, d5670 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5640:	6858      	ldr	r0, [r3, #4]
   d5642:	f7ff fb7f 	bl	d4d44 <os_thread_is_current>
   d5646:	b978      	cbnz	r0, d5668 <_ZN6ThreadD1Ev+0x30>
   d5648:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d564a:	7c5a      	ldrb	r2, [r3, #17]
   d564c:	b912      	cbnz	r2, d5654 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d564e:	6858      	ldr	r0, [r3, #4]
   d5650:	f7ff fb88 	bl	d4d64 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5654:	6823      	ldr	r3, [r4, #0]
   d5656:	6858      	ldr	r0, [r3, #4]
   d5658:	f7ff fb8c 	bl	d4d74 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d565c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d565e:	2300      	movs	r3, #0
   d5660:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5662:	b128      	cbz	r0, d5670 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5664:	f7ff ffcd 	bl	d5602 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5668:	6820      	ldr	r0, [r4, #0]
   d566a:	b108      	cbz	r0, d5670 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d566c:	f7ff ffc9 	bl	d5602 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5670:	4620      	mov	r0, r4
   d5672:	bd10      	pop	{r4, pc}

000d5674 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5674:	b538      	push	{r3, r4, r5, lr}
   d5676:	4b0c      	ldr	r3, [pc, #48]	; (d56a8 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5678:	6003      	str	r3, [r0, #0]
   d567a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d567c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5680:	b108      	cbz	r0, d5686 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5682:	f7fe fd0e 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5686:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d568a:	b135      	cbz	r5, d569a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d568c:	4628      	mov	r0, r5
   d568e:	f7ff ffd3 	bl	d5638 <_ZN6ThreadD1Ev>
   d5692:	2104      	movs	r1, #4
   d5694:	4628      	mov	r0, r5
   d5696:	f001 fa0e 	bl	d6ab6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d569a:	68a0      	ldr	r0, [r4, #8]
   d569c:	b108      	cbz	r0, d56a2 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d569e:	f7ff ffc6 	bl	d562e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d56a2:	4620      	mov	r0, r4
   d56a4:	bd38      	pop	{r3, r4, r5, pc}
   d56a6:	bf00      	nop
   d56a8:	000d75b8 	.word	0x000d75b8

000d56ac <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d56ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d56b2:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d56b6:	4606      	mov	r6, r0
   d56b8:	4688      	mov	r8, r1
   d56ba:	4691      	mov	r9, r2
   d56bc:	469a      	mov	sl, r3
   d56be:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d56c0:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d56c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d56c4:	454b      	cmp	r3, r9
   d56c6:	d129      	bne.n	d571c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d56c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d56ca:	4553      	cmp	r3, sl
   d56cc:	d126      	bne.n	d571c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d56ce:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d56d2:	455b      	cmp	r3, fp
   d56d4:	d122      	bne.n	d571c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d56d6:	2140      	movs	r1, #64	; 0x40
   d56d8:	4640      	mov	r0, r8
   d56da:	f001 fbc8 	bl	d6e6e <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d56de:	4641      	mov	r1, r8
   d56e0:	4602      	mov	r2, r0
   d56e2:	4620      	mov	r0, r4
   d56e4:	f001 fbae 	bl	d6e44 <strncmp>
   d56e8:	b9c0      	cbnz	r0, d571c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d56ea:	b16f      	cbz	r7, d5708 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d56ec:	210c      	movs	r1, #12
   d56ee:	4638      	mov	r0, r7
   d56f0:	f001 fbbd 	bl	d6e6e <strnlen>
                if (id_len)
   d56f4:	4602      	mov	r2, r0
   d56f6:	b138      	cbz	r0, d5708 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d56f8:	2358      	movs	r3, #88	; 0x58
   d56fa:	fb03 6005 	mla	r0, r3, r5, r6
   d56fe:	4639      	mov	r1, r7
   d5700:	3049      	adds	r0, #73	; 0x49
   d5702:	f001 fb9f 	bl	d6e44 <strncmp>
   d5706:	e004      	b.n	d5712 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d5708:	2058      	movs	r0, #88	; 0x58
   d570a:	fb00 6505 	mla	r5, r0, r5, r6
   d570e:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d5712:	fab0 f080 	clz	r0, r0
   d5716:	0940      	lsrs	r0, r0, #5
   d5718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d571c:	3501      	adds	r5, #1
   d571e:	2d05      	cmp	r5, #5
   d5720:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d5724:	d1cd      	bne.n	d56c2 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d5726:	2000      	movs	r0, #0
}
   d5728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d572c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5730:	b085      	sub	sp, #20
   d5732:	4607      	mov	r7, r0
   d5734:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d5738:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d573a:	9601      	str	r6, [sp, #4]
   d573c:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5740:	4689      	mov	r9, r1
   d5742:	9202      	str	r2, [sp, #8]
   d5744:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d5746:	f7ff ffb1 	bl	d56ac <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d574a:	2800      	cmp	r0, #0
   d574c:	d13c      	bne.n	d57c8 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d574e:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5750:	2358      	movs	r3, #88	; 0x58
   d5752:	fb03 7504 	mla	r5, r3, r4, r7
   d5756:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d575a:	f1b8 0f00 	cmp.w	r8, #0
   d575e:	d12e      	bne.n	d57be <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5760:	2140      	movs	r1, #64	; 0x40
   d5762:	4648      	mov	r0, r9
   d5764:	f001 fb83 	bl	d6e6e <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5768:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d576a:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d576c:	4602      	mov	r2, r0
   d576e:	4628      	mov	r0, r5
   d5770:	f001 fb25 	bl	d6dbe <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d5774:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d5778:	4641      	mov	r1, r8
   d577a:	eb05 000b 	add.w	r0, r5, fp
   d577e:	f001 fb29 	bl	d6dd4 <memset>
            event_handlers[i].handler = handler;
   d5782:	9b02      	ldr	r3, [sp, #8]
   d5784:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d5786:	9b03      	ldr	r3, [sp, #12]
   d5788:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d578a:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d578e:	b12e      	cbz	r6, d579c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d5790:	210c      	movs	r1, #12
   d5792:	4630      	mov	r0, r6
   d5794:	f001 fb6b 	bl	d6e6e <strnlen>
   d5798:	4605      	mov	r5, r0
   d579a:	e000      	b.n	d579e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d579c:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d579e:	2058      	movs	r0, #88	; 0x58
   d57a0:	4344      	muls	r4, r0
   d57a2:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d57a4:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d57a6:	462a      	mov	r2, r5
   d57a8:	4631      	mov	r1, r6
   d57aa:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d57ac:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d57ae:	f001 fb06 	bl	d6dbe <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d57b2:	2000      	movs	r0, #0
   d57b4:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d57b8:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d57bc:	e005      	b.n	d57ca <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d57be:	3401      	adds	r4, #1
   d57c0:	2c05      	cmp	r4, #5
   d57c2:	d1c6      	bne.n	d5752 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d57c4:	4802      	ldr	r0, [pc, #8]	; (d57d0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d57c6:	e000      	b.n	d57ca <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d57c8:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d57ca:	b005      	add	sp, #20
   d57cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57d0:	fffffefc 	.word	0xfffffefc

000d57d4 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d57d4:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d57d6:	2300      	movs	r3, #0
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	9300      	str	r3, [sp, #0]
   d57dc:	f7ff ffa6 	bl	d572c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d57e0:	b003      	add	sp, #12
   d57e2:	f85d fb04 	ldr.w	pc, [sp], #4

000d57e6 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d57e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d57ea:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d57ec:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d57ee:	460d      	mov	r5, r1
   d57f0:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d57f2:	f001 fb1f 	bl	d6e34 <strlen>
   d57f6:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d57fa:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d57fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d57fe:	b1ab      	cbz	r3, d582c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5800:	2140      	movs	r1, #64	; 0x40
   d5802:	4620      	mov	r0, r4
   d5804:	f001 fb33 	bl	d6e6e <strnlen>

        if (event_name_length < filter_length)
   d5808:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d580a:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d580c:	d30b      	bcc.n	d5826 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d580e:	4629      	mov	r1, r5
   d5810:	4620      	mov	r0, r4
   d5812:	f001 fac5 	bl	d6da0 <memcmp>
        if (0 == cmp)
   d5816:	b930      	cbnz	r0, d5826 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d5818:	9000      	str	r0, [sp, #0]
   d581a:	4643      	mov	r3, r8
   d581c:	462a      	mov	r2, r5
   d581e:	4621      	mov	r1, r4
   d5820:	2058      	movs	r0, #88	; 0x58
   d5822:	f7ff fce3 	bl	d51ec <system_invoke_event_handler>
   d5826:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5828:	42b4      	cmp	r4, r6
   d582a:	d1e7      	bne.n	d57fc <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d582c:	b002      	add	sp, #8
   d582e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5834 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5834:	b530      	push	{r4, r5, lr}
   d5836:	b08d      	sub	sp, #52	; 0x34
   d5838:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d583a:	2211      	movs	r2, #17
   d583c:	2100      	movs	r1, #0
   d583e:	a801      	add	r0, sp, #4
   d5840:	f001 fac8 	bl	d6dd4 <memset>
    addr.v = 6;
   d5844:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5846:	aa01      	add	r2, sp, #4
   d5848:	4909      	ldr	r1, [pc, #36]	; (d5870 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d584a:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d584e:	200a      	movs	r0, #10
   d5850:	f7ff fb80 	bl	d4f54 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5854:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d5856:	a901      	add	r1, sp, #4
   d5858:	a806      	add	r0, sp, #24
   d585a:	f7ff fe3b 	bl	d54d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d585e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5860:	3404      	adds	r4, #4
   d5862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5864:	682b      	ldr	r3, [r5, #0]
   d5866:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5868:	2000      	movs	r0, #0
   d586a:	b00d      	add	sp, #52	; 0x34
   d586c:	bd30      	pop	{r4, r5, pc}
   d586e:	bf00      	nop
   d5870:	000d75e4 	.word	0x000d75e4

000d5874 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5878:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d587a:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d587e:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5880:	4630      	mov	r0, r6
   d5882:	f7ff fe67 	bl	d5554 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5886:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5888:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d588c:	f7ff fa92 	bl	d4db4 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d5890:	2c00      	cmp	r4, #0
   d5892:	d063      	beq.n	d595c <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d5894:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5898:	b163      	cbz	r3, d58b4 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d589a:	6823      	ldr	r3, [r4, #0]
   d589c:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d58a0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d58a2:	4620      	mov	r0, r4
   d58a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58a8:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d58ac:	47b8      	blx	r7
        if (len > 0) {
   d58ae:	1e04      	subs	r4, r0, #0
   d58b0:	dc13      	bgt.n	d58da <_ZN5spark11MeshPublish4pollEv+0x66>
   d58b2:	e056      	b.n	d5962 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d58b4:	492d      	ldr	r1, [pc, #180]	; (d596c <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d58b6:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d58ba:	f001 f916 	bl	d6aea <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58be:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d58c2:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d58c6:	b113      	cbz	r3, d58ce <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d58c8:	4618      	mov	r0, r3
   d58ca:	f7fe fbea 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d58ce:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d58d2:	2b00      	cmp	r3, #0
   d58d4:	d1e1      	bne.n	d589a <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d58d6:	4826      	ldr	r0, [pc, #152]	; (d5970 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d58d8:	e044      	b.n	d5964 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d58da:	2320      	movs	r3, #32
   d58dc:	4a25      	ldr	r2, [pc, #148]	; (d5974 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d58de:	9302      	str	r3, [sp, #8]
   d58e0:	9200      	str	r2, [sp, #0]
   d58e2:	2300      	movs	r3, #0
   d58e4:	9401      	str	r4, [sp, #4]
   d58e6:	aa02      	add	r2, sp, #8
   d58e8:	4923      	ldr	r1, [pc, #140]	; (d5978 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d58ea:	9303      	str	r3, [sp, #12]
   d58ec:	2001      	movs	r0, #1
   d58ee:	f7ff fc51 	bl	d5194 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58f2:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d58f6:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d58f8:	781b      	ldrb	r3, [r3, #0]
   d58fa:	bb6b      	cbnz	r3, d5958 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d58fc:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d58fe:	4621      	mov	r1, r4
   d5900:	4638      	mov	r0, r7
   d5902:	f001 fab4 	bl	d6e6e <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d5906:	b338      	cbz	r0, d5958 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5908:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d590a:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d590c:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5910:	dd22      	ble.n	d5958 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5912:	5c3b      	ldrb	r3, [r7, r0]
   d5914:	bb03      	cbnz	r3, d5958 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d5916:	3c01      	subs	r4, #1
   d5918:	d00e      	beq.n	d5938 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d591a:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d591e:	4621      	mov	r1, r4
   d5920:	4640      	mov	r0, r8
   d5922:	f001 faa4 	bl	d6e6e <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d5926:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5928:	2c00      	cmp	r4, #0
   d592a:	dd15      	ble.n	d5958 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d592c:	f818 3000 	ldrb.w	r3, [r8, r0]
   d5930:	b993      	cbnz	r3, d5958 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d5932:	2c01      	cmp	r4, #1
   d5934:	d002      	beq.n	d593c <_ZN5spark11MeshPublish4pollEv+0xc8>
   d5936:	e00f      	b.n	d5958 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5938:	f8df 8044 	ldr.w	r8, [pc, #68]	; d5980 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d593c:	4630      	mov	r0, r6
   d593e:	f7ff fe09 	bl	d5554 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d5942:	4642      	mov	r2, r8
   d5944:	4639      	mov	r1, r7
   d5946:	1d28      	adds	r0, r5, #4
   d5948:	f7ff ff4d 	bl	d57e6 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d594c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5950:	f7ff fa30 	bl	d4db4 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5954:	2000      	movs	r0, #0
   d5956:	e005      	b.n	d5964 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d5958:	4808      	ldr	r0, [pc, #32]	; (d597c <_ZN5spark11MeshPublish4pollEv+0x108>)
   d595a:	e003      	b.n	d5964 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d595c:	2064      	movs	r0, #100	; 0x64
   d595e:	f7ff fa41 	bl	d4de4 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5962:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d5964:	b00a      	add	sp, #40	; 0x28
   d5966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d596a:	bf00      	nop
   d596c:	000d775c 	.word	0x000d775c
   d5970:	fffffefc 	.word	0xfffffefc
   d5974:	000d75f8 	.word	0x000d75f8
   d5978:	000d75f1 	.word	0x000d75f1
   d597c:	fffffee8 	.word	0xfffffee8
   d5980:	000d7574 	.word	0x000d7574

000d5984 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5984:	b510      	push	{r4, lr}
   d5986:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5988:	f3bf 8f5f 	dmb	sy
   d598c:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d5990:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d5994:	b91b      	cbnz	r3, d599e <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d5996:	4620      	mov	r0, r4
   d5998:	f7ff ff6c 	bl	d5874 <_ZN5spark11MeshPublish4pollEv>
   d599c:	e7f4      	b.n	d5988 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d599e:	bd10      	pop	{r4, pc}

000d59a0 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d59a0:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59a2:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d59a4:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d59a6:	b144      	cbz	r4, d59ba <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59a8:	4620      	mov	r0, r4
   d59aa:	f7ff fe45 	bl	d5638 <_ZN6ThreadD1Ev>
   d59ae:	4620      	mov	r0, r4
   d59b0:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d59b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59b6:	f001 b87e 	b.w	d6ab6 <_ZdlPvj>
   d59ba:	bd10      	pop	{r4, pc}

000d59bc <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d59bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59c0:	4605      	mov	r5, r0
   d59c2:	b08a      	sub	sp, #40	; 0x28
   d59c4:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d59c8:	f7ff fdc4 	bl	d5554 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d59cc:	682c      	ldr	r4, [r5, #0]
   d59ce:	2c00      	cmp	r4, #0
   d59d0:	d17b      	bne.n	d5aca <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d59d2:	204c      	movs	r0, #76	; 0x4c
   d59d4:	f7fe fb5f 	bl	d4096 <_Znwj>
   d59d8:	4606      	mov	r6, r0
   d59da:	2800      	cmp	r0, #0
   d59dc:	d073      	beq.n	d5ac6 <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d59de:	f000 fd73 	bl	d64c8 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d59e2:	4622      	mov	r2, r4
   d59e4:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d59e8:	4630      	mov	r0, r6
   d59ea:	f000 fd9d 	bl	d6528 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d59ee:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d59f0:	483a      	ldr	r0, [pc, #232]	; (d5adc <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d59f2:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d59f6:	f7ff fa7d 	bl	d4ef4 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d59fa:	6833      	ldr	r3, [r6, #0]
   d59fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5a00:	6a1b      	ldr	r3, [r3, #32]
   d5a02:	f249 0169 	movw	r1, #36969	; 0x9069
   d5a06:	4630      	mov	r0, r6
   d5a08:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d5a0a:	a804      	add	r0, sp, #16
   d5a0c:	f7ff fd54 	bl	d54b8 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5a10:	a804      	add	r0, sp, #16
   d5a12:	f7ff ff0f 	bl	d5834 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5a16:	2800      	cmp	r0, #0
   d5a18:	db4a      	blt.n	d5ab0 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d5a1a:	a904      	add	r1, sp, #16
   d5a1c:	4630      	mov	r0, r6
   d5a1e:	f000 fdef 	bl	d6600 <_ZN3UDP13joinMulticastERK9IPAddress>
   d5a22:	2800      	cmp	r0, #0
   d5a24:	db44      	blt.n	d5ab0 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5a26:	f3bf 8f5f 	dmb	sy
   d5a2a:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d5a2e:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5a32:	492b      	ldr	r1, [pc, #172]	; (d5ae0 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d5a34:	2004      	movs	r0, #4
   d5a36:	f001 f849 	bl	d6acc <_ZnwjRKSt9nothrow_t>
   d5a3a:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d5a3e:	4607      	mov	r7, r0
   d5a40:	b348      	cbz	r0, d5a96 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d5a42:	4927      	ldr	r1, [pc, #156]	; (d5ae0 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d5a44:	2014      	movs	r0, #20
   d5a46:	f001 f841 	bl	d6acc <_ZnwjRKSt9nothrow_t>
   d5a4a:	b128      	cbz	r0, d5a58 <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d5a4c:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5a4e:	6004      	str	r4, [r0, #0]
   d5a50:	6044      	str	r4, [r0, #4]
   d5a52:	6084      	str	r4, [r0, #8]
   d5a54:	60c4      	str	r4, [r0, #12]
   d5a56:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a58:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d5a5a:	b1b0      	cbz	r0, d5a8a <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d5a5c:	4b21      	ldr	r3, [pc, #132]	; (d5ae4 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d5a5e:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a60:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a62:	4921      	ldr	r1, [pc, #132]	; (d5ae8 <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d5a64:	60dd      	str	r5, [r3, #12]
   d5a66:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d5a6c:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5a70:	2203      	movs	r2, #3
   d5a72:	4b1e      	ldr	r3, [pc, #120]	; (d5aec <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d5a74:	3004      	adds	r0, #4
   d5a76:	f7ff f95d 	bl	d4d34 <os_thread_create>
   d5a7a:	b930      	cbnz	r0, d5a8a <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d5a7c:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d5a7e:	7c1b      	ldrb	r3, [r3, #16]
   d5a80:	b94b      	cbnz	r3, d5a96 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d5a82:	2001      	movs	r0, #1
   d5a84:	f7ff f9ae 	bl	d4de4 <HAL_Delay_Milliseconds>
   d5a88:	e7f8      	b.n	d5a7c <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a8a:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a8c:	2300      	movs	r3, #0
   d5a8e:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5a90:	b108      	cbz	r0, d5a96 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d5a92:	f7ff fdb6 	bl	d5602 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d5a96:	4639      	mov	r1, r7
   d5a98:	4640      	mov	r0, r8
   d5a9a:	f7ff ff81 	bl	d59a0 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d5a9e:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d5aa2:	b13b      	cbz	r3, d5ab4 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5aa4:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5aa6:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5aa8:	b130      	cbz	r0, d5ab8 <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d5aaa:	f7ff fdc0 	bl	d562e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5aae:	e00c      	b.n	d5aca <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d5ab0:	4604      	mov	r4, r0
   d5ab2:	e003      	b.n	d5abc <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d5ab4:	4c0e      	ldr	r4, [pc, #56]	; (d5af0 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d5ab6:	e001      	b.n	d5abc <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d5ab8:	4604      	mov	r4, r0
   d5aba:	e007      	b.n	d5acc <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5abc:	b136      	cbz	r6, d5acc <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d5abe:	4630      	mov	r0, r6
   d5ac0:	f7ff fdb5 	bl	d562e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5ac4:	e002      	b.n	d5acc <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5ac6:	4c0a      	ldr	r4, [pc, #40]	; (d5af0 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d5ac8:	e000      	b.n	d5acc <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d5aca:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5acc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5ad0:	f7ff f970 	bl	d4db4 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d5ad4:	4620      	mov	r0, r4
   d5ad6:	b00a      	add	sp, #40	; 0x28
   d5ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5adc:	000d7608 	.word	0x000d7608
   d5ae0:	000d775c 	.word	0x000d775c
   d5ae4:	000d5985 	.word	0x000d5985
   d5ae8:	000d760c 	.word	0x000d760c
   d5aec:	000d556d 	.word	0x000d556d
   d5af0:	fffffefc 	.word	0xfffffefc

000d5af4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d5af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5af6:	4605      	mov	r5, r0
   d5af8:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5afc:	460e      	mov	r6, r1
   d5afe:	4617      	mov	r7, r2
   d5b00:	f7ff fd28 	bl	d5554 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d5b04:	4628      	mov	r0, r5
   d5b06:	f7ff ff59 	bl	d59bc <_ZN5spark11MeshPublish13initializeUdpEv>
   d5b0a:	2800      	cmp	r0, #0
   d5b0c:	db07      	blt.n	d5b1e <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d5b0e:	463a      	mov	r2, r7
   d5b10:	4631      	mov	r1, r6
   d5b12:	1d28      	adds	r0, r5, #4
   d5b14:	f7ff fe5e 	bl	d57d4 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d5b18:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d5b1c:	e000      	b.n	d5b20 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d5b1e:	4604      	mov	r4, r0
   d5b20:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5b24:	f7ff f946 	bl	d4db4 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d5b28:	4620      	mov	r0, r4
   d5b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5b2c:	b538      	push	{r3, r4, r5, lr}
   d5b2e:	4c0e      	ldr	r4, [pc, #56]	; (d5b68 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5b30:	4b0e      	ldr	r3, [pc, #56]	; (d5b6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5b32:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5b34:	2500      	movs	r5, #0
   d5b36:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5b38:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5b3c:	6063      	str	r3, [r4, #4]
   d5b3e:	60a5      	str	r5, [r4, #8]
   d5b40:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b44:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5b48:	f7ff f924 	bl	d4d94 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5b4c:	4b08      	ldr	r3, [pc, #32]	; (d5b70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5b4e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b52:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5b56:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5b58:	4620      	mov	r0, r4
   d5b5a:	4a06      	ldr	r2, [pc, #24]	; (d5b74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5b5c:	4906      	ldr	r1, [pc, #24]	; (d5b78 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5b62:	f000 bfa3 	b.w	d6aac <__aeabi_atexit>
   d5b66:	bf00      	nop
   d5b68:	2003e4dc 	.word	0x2003e4dc
   d5b6c:	000d761c 	.word	0x000d761c
   d5b70:	000d75b8 	.word	0x000d75b8
   d5b74:	2003e4a0 	.word	0x2003e4a0
   d5b78:	000d5675 	.word	0x000d5675

000d5b7c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5b7c:	2300      	movs	r3, #0
   d5b7e:	461a      	mov	r2, r3
   d5b80:	6840      	ldr	r0, [r0, #4]
   d5b82:	f7ff bb45 	b.w	d5210 <network_connect>

000d5b86 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5b86:	2200      	movs	r2, #0
   d5b88:	2102      	movs	r1, #2
   d5b8a:	6840      	ldr	r0, [r0, #4]
   d5b8c:	f7ff bb50 	b.w	d5230 <network_disconnect>

000d5b90 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5b90:	2200      	movs	r2, #0
   d5b92:	4611      	mov	r1, r2
   d5b94:	6840      	ldr	r0, [r0, #4]
   d5b96:	f7ff bb43 	b.w	d5220 <network_connecting>

000d5b9a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5b9a:	2200      	movs	r2, #0
   d5b9c:	4611      	mov	r1, r2
   d5b9e:	6840      	ldr	r0, [r0, #4]
   d5ba0:	f7ff bb4e 	b.w	d5240 <network_ready>

000d5ba4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5ba4:	2300      	movs	r3, #0
   d5ba6:	461a      	mov	r2, r3
   d5ba8:	4619      	mov	r1, r3
   d5baa:	6840      	ldr	r0, [r0, #4]
   d5bac:	f7ff bb50 	b.w	d5250 <network_on>

000d5bb0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5bb0:	2300      	movs	r3, #0
   d5bb2:	461a      	mov	r2, r3
   d5bb4:	4619      	mov	r1, r3
   d5bb6:	6840      	ldr	r0, [r0, #4]
   d5bb8:	f7ff bb52 	b.w	d5260 <network_off>

000d5bbc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5bbc:	2200      	movs	r2, #0
   d5bbe:	f081 0101 	eor.w	r1, r1, #1
   d5bc2:	6840      	ldr	r0, [r0, #4]
   d5bc4:	f7ff bb54 	b.w	d5270 <network_listen>

000d5bc8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5bc8:	2200      	movs	r2, #0
   d5bca:	6840      	ldr	r0, [r0, #4]
   d5bcc:	f7ff bb60 	b.w	d5290 <network_set_listen_timeout>

000d5bd0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5bd0:	2200      	movs	r2, #0
   d5bd2:	4611      	mov	r1, r2
   d5bd4:	6840      	ldr	r0, [r0, #4]
   d5bd6:	f7ff bb63 	b.w	d52a0 <network_get_listen_timeout>

000d5bda <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5bda:	2200      	movs	r2, #0
   d5bdc:	4611      	mov	r1, r2
   d5bde:	6840      	ldr	r0, [r0, #4]
   d5be0:	f7ff bb4e 	b.w	d5280 <network_listening>

000d5be4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5be8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5bea:	b095      	sub	sp, #84	; 0x54
   d5bec:	4616      	mov	r6, r2
   d5bee:	460d      	mov	r5, r1
   d5bf0:	4607      	mov	r7, r0
    IPAddress addr;
   d5bf2:	f7ff fc61 	bl	d54b8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5bf6:	4621      	mov	r1, r4
   d5bf8:	2220      	movs	r2, #32
   d5bfa:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5bfc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5bfe:	f001 f8e9 	bl	d6dd4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5c02:	2340      	movs	r3, #64	; 0x40
   d5c04:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5c06:	4621      	mov	r1, r4
   d5c08:	466b      	mov	r3, sp
   d5c0a:	aa0c      	add	r2, sp, #48	; 0x30
   d5c0c:	4630      	mov	r0, r6
   d5c0e:	f7ff f9c9 	bl	d4fa4 <netdb_getaddrinfo>
    if (!r) {
   d5c12:	4604      	mov	r4, r0
   d5c14:	2800      	cmp	r0, #0
   d5c16:	d144      	bne.n	d5ca2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c18:	4602      	mov	r2, r0
   d5c1a:	2101      	movs	r1, #1
   d5c1c:	6868      	ldr	r0, [r5, #4]
   d5c1e:	f7ff fb0f 	bl	d5240 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c22:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c24:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c26:	4622      	mov	r2, r4
   d5c28:	6868      	ldr	r0, [r5, #4]
   d5c2a:	f7ff fb09 	bl	d5240 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c2e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c30:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5c32:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c34:	2e00      	cmp	r6, #0
   d5c36:	d034      	beq.n	d5ca2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5c38:	2900      	cmp	r1, #0
   d5c3a:	d132      	bne.n	d5ca2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5c3c:	6873      	ldr	r3, [r6, #4]
   d5c3e:	2b02      	cmp	r3, #2
   d5c40:	d002      	beq.n	d5c48 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5c42:	2b0a      	cmp	r3, #10
   d5c44:	d009      	beq.n	d5c5a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5c46:	e02a      	b.n	d5c9e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5c48:	f1b8 0f00 	cmp.w	r8, #0
   d5c4c:	d027      	beq.n	d5c9e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5c4e:	6971      	ldr	r1, [r6, #20]
   d5c50:	4638      	mov	r0, r7
   d5c52:	3104      	adds	r1, #4
   d5c54:	f7ff fc73 	bl	d553e <_ZN9IPAddressaSEPKh>
   d5c58:	e020      	b.n	d5c9c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5c5a:	f1b9 0f00 	cmp.w	r9, #0
   d5c5e:	d01e      	beq.n	d5c9e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5c60:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5c62:	2211      	movs	r2, #17
   d5c64:	a801      	add	r0, sp, #4
   d5c66:	f001 f8b5 	bl	d6dd4 <memset>
                    a.v = 6;
   d5c6a:	2306      	movs	r3, #6
   d5c6c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c70:	ad01      	add	r5, sp, #4
   d5c72:	f104 0308 	add.w	r3, r4, #8
   d5c76:	3418      	adds	r4, #24
   d5c78:	6818      	ldr	r0, [r3, #0]
   d5c7a:	6859      	ldr	r1, [r3, #4]
   d5c7c:	462a      	mov	r2, r5
   d5c7e:	c203      	stmia	r2!, {r0, r1}
   d5c80:	3308      	adds	r3, #8
   d5c82:	42a3      	cmp	r3, r4
   d5c84:	4615      	mov	r5, r2
   d5c86:	d1f7      	bne.n	d5c78 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5c88:	a901      	add	r1, sp, #4
   d5c8a:	a806      	add	r0, sp, #24
   d5c8c:	ad07      	add	r5, sp, #28
   d5c8e:	f7ff fc21 	bl	d54d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c94:	1d3c      	adds	r4, r7, #4
   d5c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c98:	682b      	ldr	r3, [r5, #0]
   d5c9a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5c9c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c9e:	69f6      	ldr	r6, [r6, #28]
   d5ca0:	e7c8      	b.n	d5c34 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ca2:	9800      	ldr	r0, [sp, #0]
   d5ca4:	f7ff f976 	bl	d4f94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ca8:	4638      	mov	r0, r7
   d5caa:	b015      	add	sp, #84	; 0x54
   d5cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5cb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5cb0:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5cb2:	4a03      	ldr	r2, [pc, #12]	; (d5cc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5cb4:	601a      	str	r2, [r3, #0]
   d5cb6:	2200      	movs	r2, #0
   d5cb8:	605a      	str	r2, [r3, #4]
   d5cba:	4770      	bx	lr
   d5cbc:	2003e6b0 	.word	0x2003e6b0
   d5cc0:	000d761c 	.word	0x000d761c

000d5cc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cc6:	4606      	mov	r6, r0
   d5cc8:	460d      	mov	r5, r1
   d5cca:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5ccc:	2400      	movs	r4, #0
  while (size--) {
   d5cce:	42bd      	cmp	r5, r7
   d5cd0:	d00c      	beq.n	d5cec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5cd2:	6833      	ldr	r3, [r6, #0]
   d5cd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5cd8:	689b      	ldr	r3, [r3, #8]
   d5cda:	4630      	mov	r0, r6
   d5cdc:	4798      	blx	r3
     if (chunk>=0)
   d5cde:	2800      	cmp	r0, #0
   d5ce0:	db01      	blt.n	d5ce6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5ce2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5ce4:	e7f3      	b.n	d5cce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5ce6:	2c00      	cmp	r4, #0
   d5ce8:	bf08      	it	eq
   d5cea:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5cec:	4620      	mov	r0, r4
   d5cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cf0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5cf0:	b570      	push	{r4, r5, r6, lr}
   d5cf2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5cf4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5cf6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5cf8:	b149      	cbz	r1, d5d0e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5cfa:	f001 f89b 	bl	d6e34 <strlen>
   d5cfe:	682b      	ldr	r3, [r5, #0]
   d5d00:	4602      	mov	r2, r0
   d5d02:	4621      	mov	r1, r4
   d5d04:	4628      	mov	r0, r5
   d5d06:	68db      	ldr	r3, [r3, #12]
    }
   d5d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5d0c:	4718      	bx	r3
    }
   d5d0e:	bd70      	pop	{r4, r5, r6, pc}

000d5d10 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5d10:	6803      	ldr	r3, [r0, #0]
   d5d12:	689b      	ldr	r3, [r3, #8]
   d5d14:	4718      	bx	r3

000d5d16 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d16:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5d18:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d1a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5d1c:	f7ff fff8 	bl	d5d10 <_ZN5Print5printEc>
  n += print('\n');
   d5d20:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5d22:	4604      	mov	r4, r0
  n += print('\n');
   d5d24:	4628      	mov	r0, r5
   d5d26:	f7ff fff3 	bl	d5d10 <_ZN5Print5printEc>
  return n;
}
   d5d2a:	4420      	add	r0, r4
   d5d2c:	bd38      	pop	{r3, r4, r5, pc}

000d5d2e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5d2e:	b538      	push	{r3, r4, r5, lr}
   d5d30:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d32:	f7ff ffdd 	bl	d5cf0 <_ZN5Print5writeEPKc>
   d5d36:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5d38:	4628      	mov	r0, r5
   d5d3a:	f7ff ffec 	bl	d5d16 <_ZN5Print7printlnEv>
  return n;
}
   d5d3e:	4420      	add	r0, r4
   d5d40:	bd38      	pop	{r3, r4, r5, pc}

000d5d42 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d5d42:	f7ff bff4 	b.w	d5d2e <_ZN5Print7printlnEPKc>

000d5d46 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d46:	b530      	push	{r4, r5, lr}
   d5d48:	b08b      	sub	sp, #44	; 0x2c
   d5d4a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5d4c:	2100      	movs	r1, #0
   d5d4e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5d52:	2a01      	cmp	r2, #1
   d5d54:	bf98      	it	ls
   d5d56:	220a      	movls	r2, #10
   d5d58:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5d5c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5d60:	fb05 3312 	mls	r3, r5, r2, r3
   d5d64:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d68:	2b09      	cmp	r3, #9
   d5d6a:	bf94      	ite	ls
   d5d6c:	3330      	addls	r3, #48	; 0x30
   d5d6e:	3337      	addhi	r3, #55	; 0x37
   d5d70:	b2db      	uxtb	r3, r3
   d5d72:	4621      	mov	r1, r4
   d5d74:	f804 3901 	strb.w	r3, [r4], #-1
   d5d78:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5d7a:	2d00      	cmp	r5, #0
   d5d7c:	d1ee      	bne.n	d5d5c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5d7e:	f7ff ffb7 	bl	d5cf0 <_ZN5Print5writeEPKc>
}
   d5d82:	b00b      	add	sp, #44	; 0x2c
   d5d84:	bd30      	pop	{r4, r5, pc}

000d5d86 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5d86:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5d88:	b92a      	cbnz	r2, d5d96 <_ZN5Print5printEmi+0x10>
   d5d8a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5d90:	689b      	ldr	r3, [r3, #8]
   d5d92:	b2c9      	uxtb	r1, r1
   d5d94:	4718      	bx	r3
  else return printNumber(n, base);
   d5d96:	b2d2      	uxtb	r2, r2
}
   d5d98:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5d9c:	f7ff bfd3 	b.w	d5d46 <_ZN5Print11printNumberEmh>

000d5da0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5da0:	f7ff bff1 	b.w	d5d86 <_ZN5Print5printEmi>

000d5da4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5da4:	b40c      	push	{r2, r3}
   d5da6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5daa:	b087      	sub	sp, #28
   d5dac:	af00      	add	r7, sp, #0
   d5dae:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5db2:	4605      	mov	r5, r0
   d5db4:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5db8:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5dba:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5dbc:	4623      	mov	r3, r4
   d5dbe:	464a      	mov	r2, r9
   d5dc0:	2114      	movs	r1, #20
   d5dc2:	1d38      	adds	r0, r7, #4
   d5dc4:	f7ff fa84 	bl	d52d0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5dc8:	2813      	cmp	r0, #19
   d5dca:	d805      	bhi.n	d5dd8 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5dcc:	1d39      	adds	r1, r7, #4
   d5dce:	4628      	mov	r0, r5
   d5dd0:	f7ff ff8e 	bl	d5cf0 <_ZN5Print5writeEPKc>
   d5dd4:	4604      	mov	r4, r0
   d5dd6:	e013      	b.n	d5e00 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5dd8:	f100 0308 	add.w	r3, r0, #8
   d5ddc:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5de0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5de2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5de6:	1c41      	adds	r1, r0, #1
   d5de8:	4623      	mov	r3, r4
   d5dea:	464a      	mov	r2, r9
   d5dec:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5dee:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5df0:	f7ff fa6e 	bl	d52d0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5df4:	4669      	mov	r1, sp
   d5df6:	4628      	mov	r0, r5
   d5df8:	f7ff ff7a 	bl	d5cf0 <_ZN5Print5writeEPKc>
   d5dfc:	4604      	mov	r4, r0
   d5dfe:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5e00:	b11e      	cbz	r6, d5e0a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5e02:	4628      	mov	r0, r5
   d5e04:	f7ff ff87 	bl	d5d16 <_ZN5Print7printlnEv>
   d5e08:	4404      	add	r4, r0
    return n;
}
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	371c      	adds	r7, #28
   d5e0e:	46bd      	mov	sp, r7
   d5e10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e14:	b002      	add	sp, #8
   d5e16:	4770      	bx	lr

000d5e18 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5e18:	b510      	push	{r4, lr}
   d5e1a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e1c:	f7ff fa74 	bl	d5308 <_ZNSt14_Function_baseD1Ev>
   d5e20:	4620      	mov	r0, r4
   d5e22:	bd10      	pop	{r4, pc}

000d5e24 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e24:	4803      	ldr	r0, [pc, #12]	; (d5e34 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5e26:	4a04      	ldr	r2, [pc, #16]	; (d5e38 <_GLOBAL__sub_I_RGB+0x14>)
   d5e28:	4904      	ldr	r1, [pc, #16]	; (d5e3c <_GLOBAL__sub_I_RGB+0x18>)
   d5e2a:	2300      	movs	r3, #0
   d5e2c:	6083      	str	r3, [r0, #8]
   d5e2e:	f000 be3d 	b.w	d6aac <__aeabi_atexit>
   d5e32:	bf00      	nop
   d5e34:	2003e6b8 	.word	0x2003e6b8
   d5e38:	2003e4a0 	.word	0x2003e4a0
   d5e3c:	000d5e19 	.word	0x000d5e19

000d5e40 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5e40:	4770      	bx	lr

000d5e42 <_ZN8SPIClassD0Ev>:
   d5e42:	b510      	push	{r4, lr}
   d5e44:	2110      	movs	r1, #16
   d5e46:	4604      	mov	r4, r0
   d5e48:	f000 fe35 	bl	d6ab6 <_ZdlPvj>
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	bd10      	pop	{r4, pc}

000d5e50 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5e50:	b570      	push	{r4, r5, r6, lr}
   d5e52:	4b08      	ldr	r3, [pc, #32]	; (d5e74 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5e54:	6003      	str	r3, [r0, #0]
   d5e56:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5e58:	2500      	movs	r5, #0
   d5e5a:	460e      	mov	r6, r1
   d5e5c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5e60:	f7fe ff90 	bl	d4d84 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5e64:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5e66:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5e68:	f7ff f8fc 	bl	d5064 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5e6c:	60a5      	str	r5, [r4, #8]
}
   d5e6e:	4620      	mov	r0, r4
   d5e70:	bd70      	pop	{r4, r5, r6, pc}
   d5e72:	bf00      	nop
   d5e74:	000d7650 	.word	0x000d7650

000d5e78 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5e7c:	7900      	ldrb	r0, [r0, #4]
   d5e7e:	f7ff b8c9 	b.w	d5014 <HAL_SPI_Begin>

000d5e82 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5e82:	7900      	ldrb	r0, [r0, #4]
   d5e84:	f7ff b8ce 	b.w	d5024 <HAL_SPI_Set_Bit_Order>

000d5e88 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
   d5e88:	7900      	ldrb	r0, [r0, #4]
   d5e8a:	f7ff b8d3 	b.w	d5034 <HAL_SPI_Set_Data_Mode>
	...

000d5e90 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d5e90:	4a05      	ldr	r2, [pc, #20]	; (d5ea8 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d5e92:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d5e94:	5c99      	ldrb	r1, [r3, r2]
   d5e96:	4281      	cmp	r1, r0
   d5e98:	d002      	beq.n	d5ea0 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d5e9a:	3301      	adds	r3, #1
   d5e9c:	2b08      	cmp	r3, #8
   d5e9e:	d1f9      	bne.n	d5e94 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d5ea0:	1c58      	adds	r0, r3, #1
}
   d5ea2:	b2c0      	uxtb	r0, r0
   d5ea4:	4770      	bx	lr
   d5ea6:	bf00      	nop
   d5ea8:	000d7658 	.word	0x000d7658

000d5eac <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d5eac:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d5eae:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d5eb0:	6018      	str	r0, [r3, #0]
   d5eb2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d5eb4:	6818      	ldr	r0, [r3, #0]
   d5eb6:	4288      	cmp	r0, r1
   d5eb8:	b2e5      	uxtb	r5, r4
   d5eba:	d906      	bls.n	d5eca <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5ebc:	3401      	adds	r4, #1
   d5ebe:	2c08      	cmp	r4, #8
   d5ec0:	d002      	beq.n	d5ec8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d5ec2:	0840      	lsrs	r0, r0, #1
   d5ec4:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d5ec6:	e7f5      	b.n	d5eb4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5ec8:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5ecc:	5d5b      	ldrb	r3, [r3, r5]
   d5ece:	7013      	strb	r3, [r2, #0]
   d5ed0:	bd30      	pop	{r4, r5, pc}
   d5ed2:	bf00      	nop
   d5ed4:	000d7658 	.word	0x000d7658

000d5ed8 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5ed8:	b570      	push	{r4, r5, r6, lr}
   d5eda:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d5edc:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d5ede:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5ee2:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d5ee4:	2214      	movs	r2, #20
   d5ee6:	2100      	movs	r1, #0
   d5ee8:	a803      	add	r0, sp, #12
   d5eea:	f000 ff73 	bl	d6dd4 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d5eee:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d5ef0:	a903      	add	r1, sp, #12
   d5ef2:	4630      	mov	r0, r6
   d5ef4:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d5ef6:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d5efa:	f7ff f8c3 	bl	d5084 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d5efe:	ab02      	add	r3, sp, #8
   d5f00:	f10d 0207 	add.w	r2, sp, #7
   d5f04:	4629      	mov	r1, r5
   d5f06:	9804      	ldr	r0, [sp, #16]
   d5f08:	f7ff ffd0 	bl	d5eac <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5f0c:	7920      	ldrb	r0, [r4, #4]
   d5f0e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5f12:	f7ff f897 	bl	d5044 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d5f16:	9802      	ldr	r0, [sp, #8]
   d5f18:	b008      	add	sp, #32
   d5f1a:	bd70      	pop	{r4, r5, r6, pc}

000d5f1c <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5f1c:	b538      	push	{r3, r4, r5, lr}
   d5f1e:	4604      	mov	r4, r0
   d5f20:	4608      	mov	r0, r1
    if (dividerReference)
   d5f22:	68a5      	ldr	r5, [r4, #8]
   d5f24:	b14d      	cbz	r5, d5f3a <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d5f26:	f7ff ffb3 	bl	d5e90 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d5f2a:	2201      	movs	r2, #1
   d5f2c:	fa25 f100 	lsr.w	r1, r5, r0
   d5f30:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d5f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d5f36:	f7ff bfcf 	b.w	d5ed8 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5f3a:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5f40:	f7ff b880 	b.w	d5044 <HAL_SPI_Set_Clock_Divider>

000d5f44 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5f44:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d5f46:	7900      	ldrb	r0, [r0, #4]
   d5f48:	f7ff f884 	bl	d5054 <HAL_SPI_Send_Receive_Data>
}
   d5f4c:	b2c0      	uxtb	r0, r0
   d5f4e:	bd08      	pop	{r3, pc}

000d5f50 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5f50:	7900      	ldrb	r0, [r0, #4]
   d5f52:	f7ff b88f 	b.w	d5074 <HAL_SPI_Is_Enabled>
	...

000d5f58 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5f58:	4b04      	ldr	r3, [pc, #16]	; (d5f6c <_GLOBAL__sub_I_System+0x14>)
   d5f5a:	2000      	movs	r0, #0
   d5f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5f60:	7018      	strb	r0, [r3, #0]
   d5f62:	8058      	strh	r0, [r3, #2]
   d5f64:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5f66:	f7ff b91d 	b.w	d51a4 <set_system_mode>
   d5f6a:	bf00      	nop
   d5f6c:	2003e6c8 	.word	0x2003e6c8

000d5f70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f70:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f72:	681a      	ldr	r2, [r3, #0]
   d5f74:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f76:	601a      	str	r2, [r3, #0]
   d5f78:	4770      	bx	lr
   d5f7a:	bf00      	nop
   d5f7c:	2003e438 	.word	0x2003e438
   d5f80:	2003e6d0 	.word	0x2003e6d0

000d5f84 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5f84:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5f86:	6804      	ldr	r4, [r0, #0]
   d5f88:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d5f8a:	46a4      	mov	ip, r4
    }
   d5f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5f90:	4760      	bx	ip

000d5f92 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5f92:	6803      	ldr	r3, [r0, #0]
   d5f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5f96:	4718      	bx	r3

000d5f98 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5f98:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d5f9a:	4770      	bx	lr

000d5f9c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5f9c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5f9e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5fa0:	1a10      	subs	r0, r2, r0
   d5fa2:	4770      	bx	lr

000d5fa4 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5fa4:	b513      	push	{r0, r1, r4, lr}
   d5fa6:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d5fa8:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5faa:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d5fae:	68d4      	ldr	r4, [r2, #12]
   d5fb0:	4619      	mov	r1, r3
   d5fb2:	2201      	movs	r2, #1
   d5fb4:	47a0      	blx	r4
}
   d5fb6:	b002      	add	sp, #8
   d5fb8:	bd10      	pop	{r4, pc}

000d5fba <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d5fba:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d5fbc:	6803      	ldr	r3, [r0, #0]
   d5fbe:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d5fc0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5fc2:	4798      	blx	r3
   d5fc4:	b128      	cbz	r0, d5fd2 <_ZN3UDP4readEv+0x18>
   d5fc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5fc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5fca:	1c59      	adds	r1, r3, #1
   d5fcc:	86e1      	strh	r1, [r4, #54]	; 0x36
   d5fce:	5cd0      	ldrb	r0, [r2, r3]
   d5fd0:	bd10      	pop	{r4, pc}
   d5fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5fd6:	bd10      	pop	{r4, pc}

000d5fd8 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5fd8:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d5fda:	6803      	ldr	r3, [r0, #0]
   d5fdc:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5fde:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5fe0:	4798      	blx	r3
   d5fe2:	b118      	cbz	r0, d5fec <_ZN3UDP4peekEv+0x14>
   d5fe4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5fe6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5fe8:	5cd0      	ldrb	r0, [r2, r3]
   d5fea:	bd10      	pop	{r4, pc}
   d5fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5ff0:	bd10      	pop	{r4, pc}

000d5ff2 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d5ff2:	4770      	bx	lr

000d5ff4 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5ff4:	b410      	push	{r4}
   d5ff6:	4603      	mov	r3, r0
   d5ff8:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5ffa:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d5ffc:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d5ffe:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d6000:	6803      	ldr	r3, [r0, #0]
   d6002:	1a52      	subs	r2, r2, r1
   d6004:	68db      	ldr	r3, [r3, #12]
   d6006:	4421      	add	r1, r4
}
   d6008:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d600c:	4718      	bx	r3

000d600e <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d600e:	f1a0 0010 	sub.w	r0, r0, #16
   d6012:	f7ff bfef 	b.w	d5ff4 <_ZNK3UDP7printToER5Print>

000d6016 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6016:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d6018:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d601a:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d601c:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6020:	4604      	mov	r4, r0
   d6022:	460f      	mov	r7, r1
   d6024:	4615      	mov	r5, r2
    stop();
   d6026:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d6028:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d602a:	4632      	mov	r2, r6
   d602c:	2100      	movs	r1, #0
   d602e:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d6030:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6032:	f000 fecf 	bl	d6dd4 <memset>
    saddr.sin6_len = sizeof(saddr);
   d6036:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d603a:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d603c:	260a      	movs	r6, #10
   d603e:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d6042:	f7fe ff9f 	bl	d4f84 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6046:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6048:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d604c:	2102      	movs	r1, #2
   d604e:	4630      	mov	r0, r6
   d6050:	f7fe ffd8 	bl	d5004 <sock_socket>

    if (_sock < 0) {
   d6054:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6056:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d6058:	db24      	blt.n	d60a4 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d605a:	2204      	movs	r2, #4
   d605c:	9200      	str	r2, [sp, #0]
   d605e:	ab02      	add	r3, sp, #8
   d6060:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6064:	f7fe ffae 	bl	d4fc4 <sock_setsockopt>
   d6068:	b9e0      	cbnz	r0, d60a4 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d606a:	b195      	cbz	r5, d6092 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d606c:	9003      	str	r0, [sp, #12]
   d606e:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d6072:	a903      	add	r1, sp, #12
   d6074:	b2e8      	uxtb	r0, r5
   d6076:	f7fe ff45 	bl	d4f04 <if_index_to_name>
   d607a:	b998      	cbnz	r0, d60a4 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d607c:	2306      	movs	r3, #6
   d607e:	9300      	str	r3, [sp, #0]
   d6080:	f241 020b 	movw	r2, #4107	; 0x100b
   d6084:	ab03      	add	r3, sp, #12
   d6086:	f640 71ff 	movw	r1, #4095	; 0xfff
   d608a:	6960      	ldr	r0, [r4, #20]
   d608c:	f7fe ff9a 	bl	d4fc4 <sock_setsockopt>
   d6090:	b940      	cbnz	r0, d60a4 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d6092:	221c      	movs	r2, #28
   d6094:	a905      	add	r1, sp, #20
   d6096:	6960      	ldr	r0, [r4, #20]
   d6098:	f7fe ff8c 	bl	d4fb4 <sock_bind>
   d609c:	b910      	cbnz	r0, d60a4 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d609e:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d60a0:	2001      	movs	r0, #1
   d60a2:	e004      	b.n	d60ae <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d60a4:	6823      	ldr	r3, [r4, #0]
   d60a6:	4620      	mov	r0, r4
   d60a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d60aa:	4798      	blx	r3
   d60ac:	2000      	movs	r0, #0
    }
    return bound;
}
   d60ae:	b00d      	add	sp, #52	; 0x34
   d60b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d60b2 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d60b2:	b510      	push	{r4, lr}
   d60b4:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d60b6:	6940      	ldr	r0, [r0, #20]
   d60b8:	2800      	cmp	r0, #0
   d60ba:	db01      	blt.n	d60c0 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d60bc:	f7fe ff8a 	bl	d4fd4 <sock_close>
    }

    _sock = -1;
   d60c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d60c4:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d60c6:	2300      	movs	r3, #0
   d60c8:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d60ca:	8723      	strh	r3, [r4, #56]	; 0x38
   d60cc:	bd10      	pop	{r4, pc}

000d60ce <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d60ce:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d60d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d60d2:	4605      	mov	r5, r0
   d60d4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d60d6:	b113      	cbz	r3, d60de <_ZN3UDP5writeEPKhj+0x10>
   d60d8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d60da:	1a24      	subs	r4, r4, r0
   d60dc:	e000      	b.n	d60e0 <_ZN3UDP5writeEPKhj+0x12>
   d60de:	461c      	mov	r4, r3
   d60e0:	4294      	cmp	r4, r2
   d60e2:	bf28      	it	cs
   d60e4:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d60e6:	4622      	mov	r2, r4
   d60e8:	4418      	add	r0, r3
   d60ea:	f000 fe68 	bl	d6dbe <memcpy>
    _offset += size;
   d60ee:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d60f0:	4423      	add	r3, r4
   d60f2:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d60f4:	4620      	mov	r0, r4
   d60f6:	bd38      	pop	{r3, r4, r5, pc}

000d60f8 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d60f8:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d60fa:	6803      	ldr	r3, [r0, #0]
   d60fc:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d60fe:	4604      	mov	r4, r0
   d6100:	460e      	mov	r6, r1
   d6102:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d6104:	4798      	blx	r3
   d6106:	b188      	cbz	r0, d612c <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d6108:	6823      	ldr	r3, [r4, #0]
   d610a:	4620      	mov	r0, r4
   d610c:	691b      	ldr	r3, [r3, #16]
   d610e:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d6110:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6112:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6114:	4285      	cmp	r5, r0
   d6116:	bfa8      	it	ge
   d6118:	4605      	movge	r5, r0
   d611a:	4419      	add	r1, r3
   d611c:	462a      	mov	r2, r5
   d611e:	4630      	mov	r0, r6
   d6120:	f000 fe4d 	bl	d6dbe <memcpy>
        _offset += read;
   d6124:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6126:	442b      	add	r3, r5
   d6128:	86e3      	strh	r3, [r4, #54]	; 0x36
   d612a:	e001      	b.n	d6130 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d612c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d6130:	4628      	mov	r0, r5
   d6132:	bd70      	pop	{r4, r5, r6, pc}

000d6134 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d6134:	b570      	push	{r4, r5, r6, lr}
   d6136:	4604      	mov	r4, r0
   d6138:	4b05      	ldr	r3, [pc, #20]	; (d6150 <_ZN3UDP8remoteIPEv+0x1c>)
   d613a:	f844 3b04 	str.w	r3, [r4], #4
   d613e:	f101 0520 	add.w	r5, r1, #32
   d6142:	4606      	mov	r6, r0
   d6144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6148:	682b      	ldr	r3, [r5, #0]
   d614a:	7023      	strb	r3, [r4, #0]
   d614c:	4630      	mov	r0, r6
   d614e:	bd70      	pop	{r4, r5, r6, pc}
   d6150:	000d74c4 	.word	0x000d74c4

000d6154 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6154:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6156:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6158:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d615a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d615c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d615e:	4a0a      	ldr	r2, [pc, #40]	; (d6188 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6160:	9202      	str	r2, [sp, #8]
   d6162:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6164:	468e      	mov	lr, r1
   d6166:	4606      	mov	r6, r0
   d6168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d616a:	ac03      	add	r4, sp, #12
   d616c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d616e:	682b      	ldr	r3, [r5, #0]
   d6170:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6172:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6176:	9300      	str	r3, [sp, #0]
   d6178:	4662      	mov	r2, ip
   d617a:	ab02      	add	r3, sp, #8
   d617c:	4671      	mov	r1, lr
   d617e:	4630      	mov	r0, r6
   d6180:	47b8      	blx	r7
    }
   d6182:	b009      	add	sp, #36	; 0x24
   d6184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6186:	bf00      	nop
   d6188:	000d74c4 	.word	0x000d74c4

000d618c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d618c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d618e:	6803      	ldr	r3, [r0, #0]
   d6190:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6194:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6196:	4b0d      	ldr	r3, [pc, #52]	; (d61cc <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6198:	b089      	sub	sp, #36	; 0x24
   d619a:	f100 0620 	add.w	r6, r0, #32
   d619e:	4604      	mov	r4, r0
   d61a0:	9302      	str	r3, [sp, #8]
   d61a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d61a4:	ad03      	add	r5, sp, #12
   d61a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d61a8:	6833      	ldr	r3, [r6, #0]
   d61aa:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d61ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d61ae:	9300      	str	r3, [sp, #0]
   d61b0:	4672      	mov	r2, lr
   d61b2:	ab02      	add	r3, sp, #8
   d61b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d61b6:	4620      	mov	r0, r4
   d61b8:	47b8      	blx	r7
    flush(); // wait for send to complete
   d61ba:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d61bc:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d61be:	69db      	ldr	r3, [r3, #28]
   d61c0:	4620      	mov	r0, r4
   d61c2:	4798      	blx	r3
    return result;
}
   d61c4:	4628      	mov	r0, r5
   d61c6:	b009      	add	sp, #36	; 0x24
   d61c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d61ca:	bf00      	nop
   d61cc:	000d74c4 	.word	0x000d74c4

000d61d0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d61d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d61d2:	7843      	ldrb	r3, [r0, #1]
   d61d4:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d61d6:	b08d      	sub	sp, #52	; 0x34
   d61d8:	4605      	mov	r5, r0
   d61da:	460c      	mov	r4, r1
   d61dc:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d61de:	d101      	bne.n	d61e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d61e0:	1d01      	adds	r1, r0, #4
   d61e2:	e033      	b.n	d624c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d61e4:	2b0a      	cmp	r3, #10
   d61e6:	d135      	bne.n	d6254 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d61e8:	2211      	movs	r2, #17
   d61ea:	2100      	movs	r1, #0
   d61ec:	a801      	add	r0, sp, #4
   d61ee:	f000 fdf1 	bl	d6dd4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d61f2:	68ab      	ldr	r3, [r5, #8]
   d61f4:	b943      	cbnz	r3, d6208 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d61f6:	68eb      	ldr	r3, [r5, #12]
   d61f8:	b933      	cbnz	r3, d6208 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d61fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d61fe:	692e      	ldr	r6, [r5, #16]
   d6200:	f7fe feb0 	bl	d4f64 <inet_htonl>
   d6204:	4286      	cmp	r6, r0
   d6206:	d01f      	beq.n	d6248 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6208:	f105 0308 	add.w	r3, r5, #8
   d620c:	ae01      	add	r6, sp, #4
   d620e:	f105 0e18 	add.w	lr, r5, #24
   d6212:	6818      	ldr	r0, [r3, #0]
   d6214:	6859      	ldr	r1, [r3, #4]
   d6216:	4632      	mov	r2, r6
   d6218:	c203      	stmia	r2!, {r0, r1}
   d621a:	3308      	adds	r3, #8
   d621c:	4573      	cmp	r3, lr
   d621e:	4616      	mov	r6, r2
   d6220:	d1f7      	bne.n	d6212 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d6222:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6224:	a901      	add	r1, sp, #4
   d6226:	a806      	add	r0, sp, #24
   d6228:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d622a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d622e:	f7ff f951 	bl	d54d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6232:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6234:	3404      	adds	r4, #4
   d6236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6238:	6833      	ldr	r3, [r6, #0]
   d623a:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d623c:	b157      	cbz	r7, d6254 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d623e:	8868      	ldrh	r0, [r5, #2]
   d6240:	f7fe fe98 	bl	d4f74 <inet_ntohs>
   d6244:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d6246:	e005      	b.n	d6254 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6248:	f105 0114 	add.w	r1, r5, #20
   d624c:	4620      	mov	r0, r4
   d624e:	f7ff f976 	bl	d553e <_ZN9IPAddressaSEPKh>
   d6252:	e7f3      	b.n	d623c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6254:	b00d      	add	sp, #52	; 0x34
   d6256:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6258 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d625c:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d625e:	ab0e      	add	r3, sp, #56	; 0x38
   d6260:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6262:	4606      	mov	r6, r0
   d6264:	4617      	mov	r7, r2
   d6266:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6268:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d626c:	462a      	mov	r2, r5
   d626e:	4629      	mov	r1, r5
   d6270:	f7fe fe98 	bl	d4fa4 <netdb_getaddrinfo>
   d6274:	2800      	cmp	r0, #0
   d6276:	db1f      	blt.n	d62b8 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6278:	9b01      	ldr	r3, [sp, #4]
   d627a:	b1fb      	cbz	r3, d62bc <_ZN3UDP11beginPacketEPKct+0x64>
   d627c:	695b      	ldr	r3, [r3, #20]
   d627e:	b1eb      	cbz	r3, d62bc <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6280:	a802      	add	r0, sp, #8
   d6282:	f7ff f919 	bl	d54b8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6286:	9b01      	ldr	r3, [sp, #4]
   d6288:	462a      	mov	r2, r5
   d628a:	6958      	ldr	r0, [r3, #20]
   d628c:	a902      	add	r1, sp, #8
   d628e:	f7ff ff9f 	bl	d61d0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6292:	a802      	add	r0, sp, #8
   d6294:	f7ff f930 	bl	d54f8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6298:	b180      	cbz	r0, d62bc <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d629a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d629c:	ad03      	add	r5, sp, #12
   d629e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d62a2:	4b0b      	ldr	r3, [pc, #44]	; (d62d0 <_ZN3UDP11beginPacketEPKct+0x78>)
   d62a4:	9308      	str	r3, [sp, #32]
   d62a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62a8:	ac09      	add	r4, sp, #36	; 0x24
   d62aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62ac:	682b      	ldr	r3, [r5, #0]
   d62ae:	7023      	strb	r3, [r4, #0]
   d62b0:	463a      	mov	r2, r7
   d62b2:	a908      	add	r1, sp, #32
   d62b4:	4630      	mov	r0, r6
   d62b6:	47c0      	blx	r8
   d62b8:	4604      	mov	r4, r0
   d62ba:	e001      	b.n	d62c0 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d62bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d62c0:	9801      	ldr	r0, [sp, #4]
   d62c2:	f7fe fe67 	bl	d4f94 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d62c6:	4620      	mov	r0, r4
   d62c8:	b00e      	add	sp, #56	; 0x38
   d62ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d62ce:	bf00      	nop
   d62d0:	000d74c4 	.word	0x000d74c4

000d62d4 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d62d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d62d8:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d62dc:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d62e0:	b08c      	sub	sp, #48	; 0x30
   d62e2:	4605      	mov	r5, r0
   d62e4:	460c      	mov	r4, r1
   d62e6:	4617      	mov	r7, r2
   d62e8:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d62ea:	db00      	blt.n	d62ee <_ZN3UDP13receivePacketEPhjm+0x1a>
   d62ec:	b911      	cbnz	r1, d62f4 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d62ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d62f2:	e035      	b.n	d6360 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d62f4:	f04f 0a1c 	mov.w	sl, #28
   d62f8:	ae05      	add	r6, sp, #20
   d62fa:	4652      	mov	r2, sl
   d62fc:	2100      	movs	r1, #0
   d62fe:	4630      	mov	r0, r6
   d6300:	f000 fd68 	bl	d6dd4 <memset>
        socklen_t slen = sizeof(saddr);
   d6304:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d6308:	f1b9 0f00 	cmp.w	r9, #0
   d630c:	d014      	beq.n	d6338 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d630e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6312:	fbb9 f1f2 	udiv	r1, r9, r2
   d6316:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d6318:	fb02 9111 	mls	r1, r2, r1, r9
   d631c:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d631e:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d6320:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6322:	9300      	str	r3, [sp, #0]
   d6324:	f241 0206 	movw	r2, #4102	; 0x1006
   d6328:	ab03      	add	r3, sp, #12
   d632a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d632e:	4640      	mov	r0, r8
   d6330:	f7fe fe48 	bl	d4fc4 <sock_setsockopt>
            if (ret) {
   d6334:	b108      	cbz	r0, d633a <_ZN3UDP13receivePacketEPhjm+0x66>
   d6336:	e013      	b.n	d6360 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d6338:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d633a:	ab02      	add	r3, sp, #8
   d633c:	9301      	str	r3, [sp, #4]
   d633e:	4621      	mov	r1, r4
   d6340:	4603      	mov	r3, r0
   d6342:	9600      	str	r6, [sp, #0]
   d6344:	463a      	mov	r2, r7
   d6346:	6968      	ldr	r0, [r5, #20]
   d6348:	f7fe fe4c 	bl	d4fe4 <sock_recvfrom>
        if (ret >= 0) {
   d634c:	1e04      	subs	r4, r0, #0
   d634e:	db06      	blt.n	d635e <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6350:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d6354:	f105 011c 	add.w	r1, r5, #28
   d6358:	4630      	mov	r0, r6
   d635a:	f7ff ff39 	bl	d61d0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d635e:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6360:	b00c      	add	sp, #48	; 0x30
   d6362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6366 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6366:	b538      	push	{r3, r4, r5, lr}
   d6368:	4605      	mov	r5, r0
   d636a:	4614      	mov	r4, r2
   d636c:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d636e:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6370:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6372:	d111      	bne.n	d6398 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6374:	231c      	movs	r3, #28
   d6376:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6378:	230a      	movs	r3, #10
   d637a:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d637c:	f7fe fe02 	bl	d4f84 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6380:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6382:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6386:	1d2b      	adds	r3, r5, #4
   d6388:	3514      	adds	r5, #20
   d638a:	f853 2b04 	ldr.w	r2, [r3], #4
   d638e:	f844 2b04 	str.w	r2, [r4], #4
   d6392:	42ab      	cmp	r3, r5
   d6394:	d1f9      	bne.n	d638a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6396:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6398:	2b04      	cmp	r3, #4
   d639a:	d10a      	bne.n	d63b2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d639c:	2310      	movs	r3, #16
   d639e:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d63a0:	2302      	movs	r3, #2
   d63a2:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d63a4:	f7fe fdee 	bl	d4f84 <inet_htons>
   d63a8:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d63aa:	6868      	ldr	r0, [r5, #4]
   d63ac:	f7fe fdda 	bl	d4f64 <inet_htonl>
   d63b0:	6060      	str	r0, [r4, #4]
   d63b2:	bd38      	pop	{r3, r4, r5, pc}

000d63b4 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d63b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d63b8:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d63ba:	ac03      	add	r4, sp, #12
   d63bc:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d63be:	4699      	mov	r9, r3
   d63c0:	4606      	mov	r6, r0
   d63c2:	460f      	mov	r7, r1
   d63c4:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d63c6:	2100      	movs	r1, #0
   d63c8:	462a      	mov	r2, r5
   d63ca:	4620      	mov	r0, r4
   d63cc:	f000 fd02 	bl	d6dd4 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d63d0:	4622      	mov	r2, r4
   d63d2:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d63d6:	4648      	mov	r0, r9
   d63d8:	f7ff ffc5 	bl	d6366 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d63dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d63e0:	b143      	cbz	r3, d63f4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d63e2:	e88d 0030 	stmia.w	sp, {r4, r5}
   d63e6:	2300      	movs	r3, #0
   d63e8:	4642      	mov	r2, r8
   d63ea:	4639      	mov	r1, r7
   d63ec:	6970      	ldr	r0, [r6, #20]
   d63ee:	f7fe fe01 	bl	d4ff4 <sock_sendto>
   d63f2:	e001      	b.n	d63f8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d63f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d63f8:	b00b      	add	sp, #44	; 0x2c
   d63fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d63fe <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d63fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6400:	b091      	sub	sp, #68	; 0x44
   d6402:	460c      	mov	r4, r1
   d6404:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d6406:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d6408:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d640a:	a809      	add	r0, sp, #36	; 0x24
   d640c:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d640e:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d6410:	f000 fce0 	bl	d6dd4 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d6414:	aa09      	add	r2, sp, #36	; 0x24
   d6416:	2100      	movs	r1, #0
   d6418:	4620      	mov	r0, r4
   d641a:	f7ff ffa4 	bl	d6366 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d641e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d6422:	2b02      	cmp	r3, #2
   d6424:	d12e      	bne.n	d6484 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d6426:	2300      	movs	r3, #0
   d6428:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d642a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d642c:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d642e:	b1dd      	cbz	r5, d6468 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d6430:	a902      	add	r1, sp, #8
   d6432:	4628      	mov	r0, r5
   d6434:	f7fe fd6e 	bl	d4f14 <if_get_by_index>
   d6438:	b9b0      	cbnz	r0, d6468 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d643a:	a910      	add	r1, sp, #64	; 0x40
   d643c:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d6440:	9802      	ldr	r0, [sp, #8]
   d6442:	f7fe fd6f 	bl	d4f24 <if_get_addrs>
   d6446:	b960      	cbnz	r0, d6462 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d6448:	9b03      	ldr	r3, [sp, #12]
   d644a:	b153      	cbz	r3, d6462 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d644c:	68da      	ldr	r2, [r3, #12]
   d644e:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d6450:	7851      	ldrb	r1, [r2, #1]
   d6452:	2902      	cmp	r1, #2
   d6454:	d103      	bne.n	d645e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d6456:	6852      	ldr	r2, [r2, #4]
   d6458:	b10a      	cbz	r2, d645e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d645a:	9205      	str	r2, [sp, #20]
   d645c:	e001      	b.n	d6462 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d645e:	681b      	ldr	r3, [r3, #0]
   d6460:	e7f3      	b.n	d644a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d6462:	9803      	ldr	r0, [sp, #12]
   d6464:	f7fe fd66 	bl	d4f34 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d6468:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d646a:	f04f 0308 	mov.w	r3, #8
   d646e:	9300      	str	r3, [sp, #0]
   d6470:	bf18      	it	ne
   d6472:	2203      	movne	r2, #3
   d6474:	ab04      	add	r3, sp, #16
   d6476:	bf08      	it	eq
   d6478:	2204      	moveq	r2, #4
   d647a:	2100      	movs	r1, #0
   d647c:	4630      	mov	r0, r6
   d647e:	f7fe fda1 	bl	d4fc4 <sock_setsockopt>
   d6482:	e01e      	b.n	d64c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d6484:	2b0a      	cmp	r3, #10
   d6486:	d11a      	bne.n	d64be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d6488:	ac04      	add	r4, sp, #16
   d648a:	2214      	movs	r2, #20
   d648c:	2100      	movs	r1, #0
   d648e:	4620      	mov	r0, r4
   d6490:	f000 fca0 	bl	d6dd4 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d6494:	ab0b      	add	r3, sp, #44	; 0x2c
   d6496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d6498:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d649a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d649e:	f04f 0314 	mov.w	r3, #20
   d64a2:	9300      	str	r3, [sp, #0]
   d64a4:	bf18      	it	ne
   d64a6:	220c      	movne	r2, #12
   d64a8:	4623      	mov	r3, r4
   d64aa:	bf08      	it	eq
   d64ac:	220d      	moveq	r2, #13
   d64ae:	2129      	movs	r1, #41	; 0x29
   d64b0:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d64b2:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d64b4:	f7fe fd86 	bl	d4fc4 <sock_setsockopt>
   d64b8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d64bc:	e001      	b.n	d64c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d64be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d64c2:	b011      	add	sp, #68	; 0x44
   d64c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d64c8 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d64c8:	b538      	push	{r3, r4, r5, lr}
   d64ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d64ce:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d64d0:	4b0b      	ldr	r3, [pc, #44]	; (d6500 <_ZN3UDPC1Ev+0x38>)
   d64d2:	f103 0208 	add.w	r2, r3, #8
   d64d6:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d64d8:	2500      	movs	r5, #0
   d64da:	6103      	str	r3, [r0, #16]
   d64dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d64e0:	4604      	mov	r4, r0
   d64e2:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d64e4:	6002      	str	r2, [r0, #0]
   d64e6:	6143      	str	r3, [r0, #20]
   d64e8:	301c      	adds	r0, #28
   d64ea:	f7fe ffe5 	bl	d54b8 <_ZN9IPAddressC1Ev>
   d64ee:	f44f 7300 	mov.w	r3, #512	; 0x200
   d64f2:	86e5      	strh	r5, [r4, #54]	; 0x36
   d64f4:	8725      	strh	r5, [r4, #56]	; 0x38
   d64f6:	63e5      	str	r5, [r4, #60]	; 0x3c
   d64f8:	6423      	str	r3, [r4, #64]	; 0x40
   d64fa:	6465      	str	r5, [r4, #68]	; 0x44
}
   d64fc:	4620      	mov	r0, r4
   d64fe:	bd38      	pop	{r3, r4, r5, pc}
   d6500:	000d768c 	.word	0x000d768c

000d6504 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6504:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d6506:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d650a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d650c:	b123      	cbz	r3, d6518 <_ZN3UDP13releaseBufferEv+0x14>
   d650e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6510:	b110      	cbz	r0, d6518 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d6512:	2101      	movs	r1, #1
   d6514:	f000 facf 	bl	d6ab6 <_ZdlPvj>
    }
    _buffer = NULL;
   d6518:	2300      	movs	r3, #0
   d651a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d651c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d6520:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6522:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6524:	8723      	strh	r3, [r4, #56]	; 0x38
   d6526:	bd10      	pop	{r4, pc}

000d6528 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d6528:	b570      	push	{r4, r5, r6, lr}
   d652a:	4604      	mov	r4, r0
   d652c:	4616      	mov	r6, r2
   d652e:	460d      	mov	r5, r1
    releaseBuffer();
   d6530:	f7ff ffe8 	bl	d6504 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d6534:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d6536:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d6538:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d653a:	b93e      	cbnz	r6, d654c <_ZN3UDP9setBufferEjPh+0x24>
   d653c:	b135      	cbz	r5, d654c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d653e:	4628      	mov	r0, r5
   d6540:	f7fd fdab 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d6544:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d6546:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d6548:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d654c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d654e:	b103      	cbz	r3, d6552 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d6550:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6552:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d6554:	3000      	adds	r0, #0
   d6556:	bf18      	it	ne
   d6558:	2001      	movne	r0, #1
   d655a:	bd70      	pop	{r4, r5, r6, pc}

000d655c <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d655e:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6560:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6562:	4605      	mov	r5, r0
   d6564:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6566:	b91a      	cbnz	r2, d6570 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d6568:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d656a:	b109      	cbz	r1, d6570 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d656c:	f7ff ffdc 	bl	d6528 <_ZN3UDP9setBufferEjPh>
   d6570:	3404      	adds	r4, #4
   d6572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6574:	f105 0620 	add.w	r6, r5, #32
   d6578:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d657a:	6823      	ldr	r3, [r4, #0]
   d657c:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d657e:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6580:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6582:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d6584:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d6586:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d6588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d658a <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d658a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d658c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d658e:	4604      	mov	r4, r0
   d6590:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d6592:	b91a      	cbnz	r2, d659c <_ZN3UDP11parsePacketEm+0x12>
   d6594:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6596:	b109      	cbz	r1, d659c <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d6598:	f7ff ffc6 	bl	d6528 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d659c:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d659e:	2200      	movs	r2, #0
   d65a0:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d65a2:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d65a4:	b149      	cbz	r1, d65ba <_ZN3UDP11parsePacketEm+0x30>
   d65a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d65a8:	b13a      	cbz	r2, d65ba <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d65aa:	6823      	ldr	r3, [r4, #0]
   d65ac:	4620      	mov	r0, r4
   d65ae:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d65b0:	4633      	mov	r3, r6
   d65b2:	47a8      	blx	r5
        if (result > 0) {
   d65b4:	2800      	cmp	r0, #0
            _total = result;
   d65b6:	bfc8      	it	gt
   d65b8:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d65ba:	6823      	ldr	r3, [r4, #0]
   d65bc:	4620      	mov	r0, r4
   d65be:	691b      	ldr	r3, [r3, #16]
}
   d65c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d65c4:	4718      	bx	r3
	...

000d65c8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d65c8:	b510      	push	{r4, lr}
   d65ca:	4b07      	ldr	r3, [pc, #28]	; (d65e8 <_ZN3UDPD1Ev+0x20>)
   d65cc:	f103 0208 	add.w	r2, r3, #8
   d65d0:	336c      	adds	r3, #108	; 0x6c
   d65d2:	4604      	mov	r4, r0
   d65d4:	6002      	str	r2, [r0, #0]
   d65d6:	6103      	str	r3, [r0, #16]
   d65d8:	f7ff fd6b 	bl	d60b2 <_ZN3UDP4stopEv>
   d65dc:	4620      	mov	r0, r4
   d65de:	f7ff ff91 	bl	d6504 <_ZN3UDP13releaseBufferEv>
   d65e2:	4620      	mov	r0, r4
   d65e4:	bd10      	pop	{r4, pc}
   d65e6:	bf00      	nop
   d65e8:	000d768c 	.word	0x000d768c

000d65ec <_ZN3UDPD0Ev>:
   d65ec:	b510      	push	{r4, lr}
   d65ee:	4604      	mov	r4, r0
   d65f0:	f7ff ffea 	bl	d65c8 <_ZN3UDPD1Ev>
   d65f4:	4620      	mov	r0, r4
   d65f6:	214c      	movs	r1, #76	; 0x4c
   d65f8:	f000 fa5d 	bl	d6ab6 <_ZdlPvj>
   d65fc:	4620      	mov	r0, r4
   d65fe:	bd10      	pop	{r4, pc}

000d6600 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d6600:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d6602:	6940      	ldr	r0, [r0, #20]
   d6604:	2800      	cmp	r0, #0
   d6606:	db04      	blt.n	d6612 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d6608:	2301      	movs	r3, #1
   d660a:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d660e:	f7ff bef6 	b.w	d63fe <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d6612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6616:	4770      	bx	lr

000d6618 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6618:	4770      	bx	lr

000d661a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d661a:	7441      	strb	r1, [r0, #17]
   d661c:	4770      	bx	lr

000d661e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d661e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6620:	7c00      	ldrb	r0, [r0, #16]
   d6622:	f7fe fd6f 	bl	d5104 <HAL_USART_Available_Data_For_Write>
}
   d6626:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d662a:	bd08      	pop	{r3, pc}

000d662c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d662c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d662e:	7c00      	ldrb	r0, [r0, #16]
   d6630:	f7fe fd40 	bl	d50b4 <HAL_USART_Available_Data>
}
   d6634:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6638:	bd08      	pop	{r3, pc}

000d663a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d663a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d663c:	7c00      	ldrb	r0, [r0, #16]
   d663e:	f7fe fd49 	bl	d50d4 <HAL_USART_Peek_Data>
}
   d6642:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6646:	bf28      	it	cs
   d6648:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d664c:	bd08      	pop	{r3, pc}

000d664e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d664e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6650:	7c00      	ldrb	r0, [r0, #16]
   d6652:	f7fe fd37 	bl	d50c4 <HAL_USART_Read_Data>
}
   d6656:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d665a:	bf28      	it	cs
   d665c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6660:	bd08      	pop	{r3, pc}

000d6662 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6662:	7c00      	ldrb	r0, [r0, #16]
   d6664:	f7fe bd3e 	b.w	d50e4 <HAL_USART_Flush_Data>

000d6668 <_ZN11USARTSerialD0Ev>:
   d6668:	b510      	push	{r4, lr}
   d666a:	2114      	movs	r1, #20
   d666c:	4604      	mov	r4, r0
   d666e:	f000 fa22 	bl	d6ab6 <_ZdlPvj>
   d6672:	4620      	mov	r0, r4
   d6674:	bd10      	pop	{r4, pc}

000d6676 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6676:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6678:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d667a:	4604      	mov	r4, r0
   d667c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d667e:	b925      	cbnz	r5, d668a <_ZN11USARTSerial5writeEh+0x14>
   d6680:	7c00      	ldrb	r0, [r0, #16]
   d6682:	f7fe fd3f 	bl	d5104 <HAL_USART_Available_Data_For_Write>
   d6686:	2800      	cmp	r0, #0
   d6688:	dd05      	ble.n	d6696 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d668a:	4631      	mov	r1, r6
   d668c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d668e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6692:	f7fe bd07 	b.w	d50a4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6696:	4628      	mov	r0, r5
   d6698:	bd70      	pop	{r4, r5, r6, pc}
	...

000d669c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d669c:	b510      	push	{r4, lr}
   d669e:	4604      	mov	r4, r0
   d66a0:	4608      	mov	r0, r1
   d66a2:	4611      	mov	r1, r2
   d66a4:	2200      	movs	r2, #0
   d66a6:	6062      	str	r2, [r4, #4]
   d66a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66ac:	60a2      	str	r2, [r4, #8]
   d66ae:	4a05      	ldr	r2, [pc, #20]	; (d66c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d66b0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d66b2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d66b4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d66b6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d66b8:	461a      	mov	r2, r3
   d66ba:	f7fe fceb 	bl	d5094 <HAL_USART_Init>
}
   d66be:	4620      	mov	r0, r4
   d66c0:	bd10      	pop	{r4, pc}
   d66c2:	bf00      	nop
   d66c4:	000d7704 	.word	0x000d7704

000d66c8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d66c8:	7c00      	ldrb	r0, [r0, #16]
   d66ca:	f7fe bd13 	b.w	d50f4 <HAL_USART_Is_Enabled>
	...

000d66d0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d66d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d66d2:	4c19      	ldr	r4, [pc, #100]	; (d6738 <_Z22__fetch_global_Serial1v+0x68>)
   d66d4:	6825      	ldr	r5, [r4, #0]
   d66d6:	b94d      	cbnz	r5, d66ec <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d66d8:	2084      	movs	r0, #132	; 0x84
   d66da:	f7fd fcdc 	bl	d4096 <_Znwj>
   d66de:	4606      	mov	r6, r0
   d66e0:	b118      	cbz	r0, d66ea <_Z22__fetch_global_Serial1v+0x1a>
   d66e2:	2284      	movs	r2, #132	; 0x84
   d66e4:	4629      	mov	r1, r5
   d66e6:	f000 fb75 	bl	d6dd4 <memset>
   d66ea:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d66ec:	4d13      	ldr	r5, [pc, #76]	; (d673c <_Z22__fetch_global_Serial1v+0x6c>)
   d66ee:	682e      	ldr	r6, [r5, #0]
   d66f0:	b94e      	cbnz	r6, d6706 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d66f2:	2084      	movs	r0, #132	; 0x84
   d66f4:	f7fd fccf 	bl	d4096 <_Znwj>
   d66f8:	4607      	mov	r7, r0
   d66fa:	b118      	cbz	r0, d6704 <_Z22__fetch_global_Serial1v+0x34>
   d66fc:	2284      	movs	r2, #132	; 0x84
   d66fe:	4631      	mov	r1, r6
   d6700:	f000 fb68 	bl	d6dd4 <memset>
   d6704:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6706:	4f0e      	ldr	r7, [pc, #56]	; (d6740 <_Z22__fetch_global_Serial1v+0x70>)
   d6708:	6839      	ldr	r1, [r7, #0]
   d670a:	f011 0601 	ands.w	r6, r1, #1
   d670e:	d111      	bne.n	d6734 <_Z22__fetch_global_Serial1v+0x64>
   d6710:	4638      	mov	r0, r7
   d6712:	f7fd fcd3 	bl	d40bc <__cxa_guard_acquire>
   d6716:	b168      	cbz	r0, d6734 <_Z22__fetch_global_Serial1v+0x64>
   d6718:	6822      	ldr	r2, [r4, #0]
   d671a:	682b      	ldr	r3, [r5, #0]
   d671c:	4809      	ldr	r0, [pc, #36]	; (d6744 <_Z22__fetch_global_Serial1v+0x74>)
   d671e:	4631      	mov	r1, r6
   d6720:	f7ff ffbc 	bl	d669c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6724:	4638      	mov	r0, r7
   d6726:	f7fd fcce 	bl	d40c6 <__cxa_guard_release>
   d672a:	4a07      	ldr	r2, [pc, #28]	; (d6748 <_Z22__fetch_global_Serial1v+0x78>)
   d672c:	4907      	ldr	r1, [pc, #28]	; (d674c <_Z22__fetch_global_Serial1v+0x7c>)
   d672e:	4805      	ldr	r0, [pc, #20]	; (d6744 <_Z22__fetch_global_Serial1v+0x74>)
   d6730:	f000 f9bc 	bl	d6aac <__aeabi_atexit>
#endif
	return serial1;
}
   d6734:	4803      	ldr	r0, [pc, #12]	; (d6744 <_Z22__fetch_global_Serial1v+0x74>)
   d6736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6738:	2003e6f0 	.word	0x2003e6f0
   d673c:	2003e6e8 	.word	0x2003e6e8
   d6740:	2003e6ec 	.word	0x2003e6ec
   d6744:	2003e6d4 	.word	0x2003e6d4
   d6748:	2003e4a0 	.word	0x2003e4a0
   d674c:	000d6619 	.word	0x000d6619

000d6750 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6750:	7441      	strb	r1, [r0, #17]
   d6752:	4770      	bx	lr

000d6754 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6754:	4770      	bx	lr

000d6756 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6756:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6758:	2100      	movs	r1, #0
   d675a:	7c00      	ldrb	r0, [r0, #16]
   d675c:	f7fe fcfa 	bl	d5154 <HAL_USB_USART_Receive_Data>
}
   d6760:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6764:	bf28      	it	cs
   d6766:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d676a:	bd08      	pop	{r3, pc}

000d676c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d676c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d676e:	2101      	movs	r1, #1
   d6770:	7c00      	ldrb	r0, [r0, #16]
   d6772:	f7fe fcef 	bl	d5154 <HAL_USB_USART_Receive_Data>
}
   d6776:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d677a:	bf28      	it	cs
   d677c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6780:	bd08      	pop	{r3, pc}

000d6782 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6782:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6784:	7c00      	ldrb	r0, [r0, #16]
   d6786:	f7fe fcdd 	bl	d5144 <HAL_USB_USART_Available_Data_For_Write>
}
   d678a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d678e:	bd08      	pop	{r3, pc}

000d6790 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6790:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6792:	7c00      	ldrb	r0, [r0, #16]
   d6794:	f7fe fcce 	bl	d5134 <HAL_USB_USART_Available_Data>
}
   d6798:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d679c:	bd08      	pop	{r3, pc}

000d679e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d679e:	7c00      	ldrb	r0, [r0, #16]
   d67a0:	f7fe bce8 	b.w	d5174 <HAL_USB_USART_Flush_Data>

000d67a4 <_ZN9USBSerialD0Ev>:
   d67a4:	b510      	push	{r4, lr}
   d67a6:	2114      	movs	r1, #20
   d67a8:	4604      	mov	r4, r0
   d67aa:	f000 f984 	bl	d6ab6 <_ZdlPvj>
   d67ae:	4620      	mov	r0, r4
   d67b0:	bd10      	pop	{r4, pc}

000d67b2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d67b2:	b538      	push	{r3, r4, r5, lr}
   d67b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d67b6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d67b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d67ba:	f7fe fcc3 	bl	d5144 <HAL_USB_USART_Available_Data_For_Write>
   d67be:	2800      	cmp	r0, #0
   d67c0:	dc01      	bgt.n	d67c6 <_ZN9USBSerial5writeEh+0x14>
   d67c2:	7c60      	ldrb	r0, [r4, #17]
   d67c4:	b128      	cbz	r0, d67d2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d67c6:	4629      	mov	r1, r5
   d67c8:	7c20      	ldrb	r0, [r4, #16]
   d67ca:	f7fe fccb 	bl	d5164 <HAL_USB_USART_Send_Data>
   d67ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d67d2:	bd38      	pop	{r3, r4, r5, pc}

000d67d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d67d4:	b510      	push	{r4, lr}
   d67d6:	4604      	mov	r4, r0
   d67d8:	2300      	movs	r3, #0
   d67da:	6063      	str	r3, [r4, #4]
   d67dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d67e0:	60a3      	str	r3, [r4, #8]
   d67e2:	4b05      	ldr	r3, [pc, #20]	; (d67f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d67e4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d67e6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d67e8:	4608      	mov	r0, r1
{
  _serial = serial;
   d67ea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d67ec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d67ee:	4611      	mov	r1, r2
   d67f0:	f7fe fc90 	bl	d5114 <HAL_USB_USART_Init>
}
   d67f4:	4620      	mov	r0, r4
   d67f6:	bd10      	pop	{r4, pc}
   d67f8:	000d7734 	.word	0x000d7734

000d67fc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d67fc:	2200      	movs	r2, #0
   d67fe:	7c00      	ldrb	r0, [r0, #16]
   d6800:	f7fe bc90 	b.w	d5124 <HAL_USB_USART_Begin>

000d6804 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6804:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6806:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6808:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d680a:	2100      	movs	r1, #0
   d680c:	f000 fae2 	bl	d6dd4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6810:	4620      	mov	r0, r4
   d6812:	bd10      	pop	{r4, pc}

000d6814 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6814:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6816:	4d0e      	ldr	r5, [pc, #56]	; (d6850 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6818:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d681a:	a801      	add	r0, sp, #4
   d681c:	f7ff fff2 	bl	d6804 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6820:	6829      	ldr	r1, [r5, #0]
   d6822:	f011 0401 	ands.w	r4, r1, #1
   d6826:	d110      	bne.n	d684a <_Z16_fetch_usbserialv+0x36>
   d6828:	4628      	mov	r0, r5
   d682a:	f7fd fc47 	bl	d40bc <__cxa_guard_acquire>
   d682e:	b160      	cbz	r0, d684a <_Z16_fetch_usbserialv+0x36>
   d6830:	aa01      	add	r2, sp, #4
   d6832:	4621      	mov	r1, r4
   d6834:	4807      	ldr	r0, [pc, #28]	; (d6854 <_Z16_fetch_usbserialv+0x40>)
   d6836:	f7ff ffcd 	bl	d67d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d683a:	4628      	mov	r0, r5
   d683c:	f7fd fc43 	bl	d40c6 <__cxa_guard_release>
   d6840:	4a05      	ldr	r2, [pc, #20]	; (d6858 <_Z16_fetch_usbserialv+0x44>)
   d6842:	4906      	ldr	r1, [pc, #24]	; (d685c <_Z16_fetch_usbserialv+0x48>)
   d6844:	4803      	ldr	r0, [pc, #12]	; (d6854 <_Z16_fetch_usbserialv+0x40>)
   d6846:	f000 f931 	bl	d6aac <__aeabi_atexit>
	return _usbserial;
}
   d684a:	4802      	ldr	r0, [pc, #8]	; (d6854 <_Z16_fetch_usbserialv+0x40>)
   d684c:	b007      	add	sp, #28
   d684e:	bd30      	pop	{r4, r5, pc}
   d6850:	2003e6f4 	.word	0x2003e6f4
   d6854:	2003e6f8 	.word	0x2003e6f8
   d6858:	2003e4a0 	.word	0x2003e4a0
   d685c:	000d6755 	.word	0x000d6755

000d6860 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6860:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6862:	4b0f      	ldr	r3, [pc, #60]	; (d68a0 <serialEventRun+0x40>)
   d6864:	b133      	cbz	r3, d6874 <serialEventRun+0x14>
   d6866:	f7ff ffd5 	bl	d6814 <_Z16_fetch_usbserialv>
   d686a:	6803      	ldr	r3, [r0, #0]
   d686c:	691b      	ldr	r3, [r3, #16]
   d686e:	4798      	blx	r3
   d6870:	2800      	cmp	r0, #0
   d6872:	dc0d      	bgt.n	d6890 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6874:	4b0b      	ldr	r3, [pc, #44]	; (d68a4 <serialEventRun+0x44>)
   d6876:	b133      	cbz	r3, d6886 <serialEventRun+0x26>
   d6878:	f7ff ff2a 	bl	d66d0 <_Z22__fetch_global_Serial1v>
   d687c:	6803      	ldr	r3, [r0, #0]
   d687e:	691b      	ldr	r3, [r3, #16]
   d6880:	4798      	blx	r3
   d6882:	2800      	cmp	r0, #0
   d6884:	dc07      	bgt.n	d6896 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d6886:	4b08      	ldr	r3, [pc, #32]	; (d68a8 <serialEventRun+0x48>)
   d6888:	b143      	cbz	r3, d689c <serialEventRun+0x3c>
   d688a:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d688e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6890:	f3af 8000 	nop.w
   d6894:	e7ee      	b.n	d6874 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6896:	f3af 8000 	nop.w
   d689a:	e7f4      	b.n	d6886 <serialEventRun+0x26>
   d689c:	bd08      	pop	{r3, pc}
   d689e:	bf00      	nop
	...

000d68ac <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d68ac:	b508      	push	{r3, lr}
	serialEventRun();
   d68ae:	f7ff ffd7 	bl	d6860 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d68b2:	f7fe faa7 	bl	d4e04 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d68b6:	4b01      	ldr	r3, [pc, #4]	; (d68bc <_post_loop+0x10>)
   d68b8:	6018      	str	r0, [r3, #0]
   d68ba:	bd08      	pop	{r3, pc}
   d68bc:	2003e710 	.word	0x2003e710

000d68c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d68c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d68c2:	2300      	movs	r3, #0
   d68c4:	9300      	str	r3, [sp, #0]
   d68c6:	461a      	mov	r2, r3
   d68c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d68cc:	f7fe fc84 	bl	d51d8 <system_ctrl_set_result>
}
   d68d0:	b003      	add	sp, #12
   d68d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d68d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d68d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d68da:	8843      	ldrh	r3, [r0, #2]
   d68dc:	2b0a      	cmp	r3, #10
   d68de:	d008      	beq.n	d68f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d68e0:	2b50      	cmp	r3, #80	; 0x50
   d68e2:	d109      	bne.n	d68f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d68e4:	4b09      	ldr	r3, [pc, #36]	; (d690c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d68e6:	681b      	ldr	r3, [r3, #0]
   d68e8:	b13b      	cbz	r3, d68fa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d68ea:	b003      	add	sp, #12
   d68ec:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d68f0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d68f2:	f7ff ffe5 	bl	d68c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d68f6:	e006      	b.n	d6906 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d68f8:	2300      	movs	r3, #0
   d68fa:	9300      	str	r3, [sp, #0]
   d68fc:	461a      	mov	r2, r3
   d68fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6902:	f7fe fc69 	bl	d51d8 <system_ctrl_set_result>
        break;
    }
}
   d6906:	b003      	add	sp, #12
   d6908:	f85d fb04 	ldr.w	pc, [sp], #4
   d690c:	2003e70c 	.word	0x2003e70c

000d6910 <module_user_init_hook>:

void module_user_init_hook()
{
   d6910:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6912:	f7fe fa5f 	bl	d4dd4 <HAL_RNG_GetRandomNumber>
   d6916:	4604      	mov	r4, r0
    srand(seed);
   d6918:	f000 fa64 	bl	d6de4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d691c:	4b07      	ldr	r3, [pc, #28]	; (d693c <module_user_init_hook+0x2c>)
   d691e:	b113      	cbz	r3, d6926 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6920:	4620      	mov	r0, r4
   d6922:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6926:	2100      	movs	r1, #0
   d6928:	4804      	ldr	r0, [pc, #16]	; (d693c <module_user_init_hook+0x2c>)
   d692a:	f7fe fc69 	bl	d5200 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d692e:	2100      	movs	r1, #0
   d6930:	4803      	ldr	r0, [pc, #12]	; (d6940 <module_user_init_hook+0x30>)
}
   d6932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6936:	f7fe bc45 	b.w	d51c4 <system_ctrl_set_app_request_handler>
   d693a:	bf00      	nop
   d693c:	00000000 	.word	0x00000000
   d6940:	000d68d9 	.word	0x000d68d9

000d6944 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6944:	b510      	push	{r4, lr}
   d6946:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6948:	480f      	ldr	r0, [pc, #60]	; (d6988 <pinAvailable+0x44>)
   d694a:	f7ff fb01 	bl	d5f50 <_ZN8SPIClass9isEnabledEv>
   d694e:	b128      	cbz	r0, d695c <pinAvailable+0x18>
   d6950:	f1a4 030b 	sub.w	r3, r4, #11
   d6954:	2b02      	cmp	r3, #2
   d6956:	d801      	bhi.n	d695c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6958:	2000      	movs	r0, #0
   d695a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d695c:	f000 f864 	bl	d6a28 <_Z19__fetch_global_Wirev>
   d6960:	f7fe fd6c 	bl	d543c <_ZN7TwoWire9isEnabledEv>
   d6964:	b108      	cbz	r0, d696a <pinAvailable+0x26>
   d6966:	2c01      	cmp	r4, #1
   d6968:	d9f6      	bls.n	d6958 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d696a:	f7ff feb1 	bl	d66d0 <_Z22__fetch_global_Serial1v>
   d696e:	f7ff feab 	bl	d66c8 <_ZN11USARTSerial9isEnabledEv>
   d6972:	b118      	cbz	r0, d697c <pinAvailable+0x38>
   d6974:	f1a4 0309 	sub.w	r3, r4, #9
   d6978:	2b01      	cmp	r3, #1
   d697a:	d9ed      	bls.n	d6958 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d697c:	2c1e      	cmp	r4, #30
   d697e:	bf8c      	ite	hi
   d6980:	2000      	movhi	r0, #0
   d6982:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6984:	bd10      	pop	{r4, pc}
   d6986:	bf00      	nop
   d6988:	2003e72c 	.word	0x2003e72c

000d698c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d698c:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d698e:	b538      	push	{r3, r4, r5, lr}
   d6990:	4604      	mov	r4, r0
   d6992:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6994:	d80a      	bhi.n	d69ac <pinMode+0x20>
   d6996:	29ff      	cmp	r1, #255	; 0xff
   d6998:	d008      	beq.n	d69ac <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d699a:	f7ff ffd3 	bl	d6944 <pinAvailable>
   d699e:	b128      	cbz	r0, d69ac <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d69a0:	4629      	mov	r1, r5
   d69a2:	4620      	mov	r0, r4
}
   d69a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d69a8:	f7fe ba3c 	b.w	d4e24 <HAL_Pin_Mode>
   d69ac:	bd38      	pop	{r3, r4, r5, pc}

000d69ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d69ae:	b538      	push	{r3, r4, r5, lr}
   d69b0:	4604      	mov	r4, r0
   d69b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d69b4:	f7fe fa3e 	bl	d4e34 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d69b8:	28ff      	cmp	r0, #255	; 0xff
   d69ba:	d010      	beq.n	d69de <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d69bc:	2806      	cmp	r0, #6
   d69be:	d804      	bhi.n	d69ca <digitalWrite+0x1c>
   d69c0:	234d      	movs	r3, #77	; 0x4d
   d69c2:	fa23 f000 	lsr.w	r0, r3, r0
   d69c6:	07c3      	lsls	r3, r0, #31
   d69c8:	d409      	bmi.n	d69de <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d69ca:	4620      	mov	r0, r4
   d69cc:	f7ff ffba 	bl	d6944 <pinAvailable>
   d69d0:	b128      	cbz	r0, d69de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d69d2:	4629      	mov	r1, r5
   d69d4:	4620      	mov	r0, r4
}
   d69d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d69da:	f7fe ba33 	b.w	d4e44 <HAL_GPIO_Write>
   d69de:	bd38      	pop	{r3, r4, r5, pc}

000d69e0 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d69e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69e4:	4690      	mov	r8, r2
   d69e6:	461e      	mov	r6, r3
   d69e8:	2407      	movs	r4, #7
   d69ea:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d69ec:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d69ee:	f1b8 0f00 	cmp.w	r8, #0
   d69f2:	d104      	bne.n	d69fe <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d69f4:	f1c4 0107 	rsb	r1, r4, #7
   d69f8:	fa46 f101 	asr.w	r1, r6, r1
   d69fc:	e001      	b.n	d6a02 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d69fe:	fa46 f104 	asr.w	r1, r6, r4
   d6a02:	f001 0101 	and.w	r1, r1, #1
   d6a06:	4638      	mov	r0, r7
   d6a08:	f7ff ffd1 	bl	d69ae <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d6a0c:	2101      	movs	r1, #1
   d6a0e:	4628      	mov	r0, r5
   d6a10:	f7ff ffcd 	bl	d69ae <digitalWrite>
    digitalWrite(clockPin, LOW);
   d6a14:	2100      	movs	r1, #0
   d6a16:	4628      	mov	r0, r5
   d6a18:	f7ff ffc9 	bl	d69ae <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d6a1c:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   d6a20:	d2e5      	bcs.n	d69ee <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d6a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6a28 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6a28:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6a2a:	4d0b      	ldr	r5, [pc, #44]	; (d6a58 <_Z19__fetch_global_Wirev+0x30>)
   d6a2c:	6829      	ldr	r1, [r5, #0]
   d6a2e:	f011 0401 	ands.w	r4, r1, #1
   d6a32:	d10f      	bne.n	d6a54 <_Z19__fetch_global_Wirev+0x2c>
   d6a34:	4628      	mov	r0, r5
   d6a36:	f7fd fb41 	bl	d40bc <__cxa_guard_acquire>
   d6a3a:	b158      	cbz	r0, d6a54 <_Z19__fetch_global_Wirev+0x2c>
   d6a3c:	4621      	mov	r1, r4
   d6a3e:	4807      	ldr	r0, [pc, #28]	; (d6a5c <_Z19__fetch_global_Wirev+0x34>)
   d6a40:	f7fe fcd6 	bl	d53f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6a44:	4628      	mov	r0, r5
   d6a46:	f7fd fb3e 	bl	d40c6 <__cxa_guard_release>
   d6a4a:	4a05      	ldr	r2, [pc, #20]	; (d6a60 <_Z19__fetch_global_Wirev+0x38>)
   d6a4c:	4905      	ldr	r1, [pc, #20]	; (d6a64 <_Z19__fetch_global_Wirev+0x3c>)
   d6a4e:	4803      	ldr	r0, [pc, #12]	; (d6a5c <_Z19__fetch_global_Wirev+0x34>)
   d6a50:	f000 f82c 	bl	d6aac <__aeabi_atexit>
	return wire;
}
   d6a54:	4801      	ldr	r0, [pc, #4]	; (d6a5c <_Z19__fetch_global_Wirev+0x34>)
   d6a56:	bd38      	pop	{r3, r4, r5, pc}
   d6a58:	2003e714 	.word	0x2003e714
   d6a5c:	2003e718 	.word	0x2003e718
   d6a60:	2003e4a0 	.word	0x2003e4a0
   d6a64:	000d5399 	.word	0x000d5399

000d6a68 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a68:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6a6a:	4c0c      	ldr	r4, [pc, #48]	; (d6a9c <_GLOBAL__sub_I_SPI+0x34>)
   d6a6c:	4e0c      	ldr	r6, [pc, #48]	; (d6aa0 <_GLOBAL__sub_I_SPI+0x38>)
   d6a6e:	4d0d      	ldr	r5, [pc, #52]	; (d6aa4 <_GLOBAL__sub_I_SPI+0x3c>)
   d6a70:	2100      	movs	r1, #0
   d6a72:	4620      	mov	r0, r4
   d6a74:	f7ff f9ec 	bl	d5e50 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6a78:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a7a:	4c0b      	ldr	r4, [pc, #44]	; (d6aa8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6a7c:	4632      	mov	r2, r6
   d6a7e:	4629      	mov	r1, r5
   d6a80:	f000 f814 	bl	d6aac <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a84:	2101      	movs	r1, #1
   d6a86:	4620      	mov	r0, r4
   d6a88:	f7ff f9e2 	bl	d5e50 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6a8c:	4632      	mov	r2, r6
   d6a8e:	4629      	mov	r1, r5
   d6a90:	4620      	mov	r0, r4
   d6a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6a96:	f000 b809 	b.w	d6aac <__aeabi_atexit>
   d6a9a:	bf00      	nop
   d6a9c:	2003e72c 	.word	0x2003e72c
   d6aa0:	2003e4a0 	.word	0x2003e4a0
   d6aa4:	000d5e41 	.word	0x000d5e41
   d6aa8:	2003e73c 	.word	0x2003e73c

000d6aac <__aeabi_atexit>:
   d6aac:	460b      	mov	r3, r1
   d6aae:	4601      	mov	r1, r0
   d6ab0:	4618      	mov	r0, r3
   d6ab2:	f000 b967 	b.w	d6d84 <__cxa_atexit>

000d6ab6 <_ZdlPvj>:
   d6ab6:	f7fd baf2 	b.w	d409e <_ZdlPv>
	...

000d6abc <_ZSt15get_new_handlerv>:
   d6abc:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <_ZSt15get_new_handlerv+0xc>)
   d6abe:	6818      	ldr	r0, [r3, #0]
   d6ac0:	f3bf 8f5f 	dmb	sy
   d6ac4:	4770      	bx	lr
   d6ac6:	bf00      	nop
   d6ac8:	2003e74c 	.word	0x2003e74c

000d6acc <_ZnwjRKSt9nothrow_t>:
   d6acc:	b510      	push	{r4, lr}
   d6ace:	2800      	cmp	r0, #0
   d6ad0:	bf14      	ite	ne
   d6ad2:	4604      	movne	r4, r0
   d6ad4:	2401      	moveq	r4, #1
   d6ad6:	4620      	mov	r0, r4
   d6ad8:	f7fe fbea 	bl	d52b0 <malloc>
   d6adc:	b920      	cbnz	r0, d6ae8 <_ZnwjRKSt9nothrow_t+0x1c>
   d6ade:	f7ff ffed 	bl	d6abc <_ZSt15get_new_handlerv>
   d6ae2:	b108      	cbz	r0, d6ae8 <_ZnwjRKSt9nothrow_t+0x1c>
   d6ae4:	4780      	blx	r0
   d6ae6:	e7f6      	b.n	d6ad6 <_ZnwjRKSt9nothrow_t+0xa>
   d6ae8:	bd10      	pop	{r4, pc}

000d6aea <_ZnajRKSt9nothrow_t>:
   d6aea:	f7ff bfef 	b.w	d6acc <_ZnwjRKSt9nothrow_t>

000d6aee <_ZSt25__throw_bad_function_callv>:
   d6aee:	b508      	push	{r3, lr}
   d6af0:	f7fe fbf6 	bl	d52e0 <abort>

000d6af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6af4:	4b24      	ldr	r3, [pc, #144]	; (d6b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6af6:	681a      	ldr	r2, [r3, #0]
   d6af8:	07d0      	lsls	r0, r2, #31
   d6afa:	bf5c      	itt	pl
   d6afc:	2201      	movpl	r2, #1
   d6afe:	601a      	strpl	r2, [r3, #0]
   d6b00:	4b22      	ldr	r3, [pc, #136]	; (d6b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6b02:	681a      	ldr	r2, [r3, #0]
   d6b04:	07d1      	lsls	r1, r2, #31
   d6b06:	bf5c      	itt	pl
   d6b08:	2201      	movpl	r2, #1
   d6b0a:	601a      	strpl	r2, [r3, #0]
   d6b0c:	4b20      	ldr	r3, [pc, #128]	; (d6b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	07d2      	lsls	r2, r2, #31
   d6b12:	bf5c      	itt	pl
   d6b14:	2201      	movpl	r2, #1
   d6b16:	601a      	strpl	r2, [r3, #0]
   d6b18:	4b1e      	ldr	r3, [pc, #120]	; (d6b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6b1a:	681a      	ldr	r2, [r3, #0]
   d6b1c:	07d0      	lsls	r0, r2, #31
   d6b1e:	bf5c      	itt	pl
   d6b20:	2201      	movpl	r2, #1
   d6b22:	601a      	strpl	r2, [r3, #0]
   d6b24:	4b1c      	ldr	r3, [pc, #112]	; (d6b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d1      	lsls	r1, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b1a      	ldr	r3, [pc, #104]	; (d6b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d2      	lsls	r2, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4b18      	ldr	r3, [pc, #96]	; (d6ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6b3e:	681a      	ldr	r2, [r3, #0]
   d6b40:	07d0      	lsls	r0, r2, #31
   d6b42:	bf5c      	itt	pl
   d6b44:	2201      	movpl	r2, #1
   d6b46:	601a      	strpl	r2, [r3, #0]
   d6b48:	4b16      	ldr	r3, [pc, #88]	; (d6ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6b4a:	681a      	ldr	r2, [r3, #0]
   d6b4c:	07d1      	lsls	r1, r2, #31
   d6b4e:	bf5c      	itt	pl
   d6b50:	2201      	movpl	r2, #1
   d6b52:	601a      	strpl	r2, [r3, #0]
   d6b54:	4b14      	ldr	r3, [pc, #80]	; (d6ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6b56:	681a      	ldr	r2, [r3, #0]
   d6b58:	07d2      	lsls	r2, r2, #31
   d6b5a:	bf5c      	itt	pl
   d6b5c:	2201      	movpl	r2, #1
   d6b5e:	601a      	strpl	r2, [r3, #0]
   d6b60:	4b12      	ldr	r3, [pc, #72]	; (d6bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6b62:	681a      	ldr	r2, [r3, #0]
   d6b64:	07d0      	lsls	r0, r2, #31
   d6b66:	bf5c      	itt	pl
   d6b68:	2201      	movpl	r2, #1
   d6b6a:	601a      	strpl	r2, [r3, #0]
   d6b6c:	4b10      	ldr	r3, [pc, #64]	; (d6bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6b6e:	681a      	ldr	r2, [r3, #0]
   d6b70:	07d1      	lsls	r1, r2, #31
   d6b72:	bf5c      	itt	pl
   d6b74:	2201      	movpl	r2, #1
   d6b76:	601a      	strpl	r2, [r3, #0]
   d6b78:	4b0e      	ldr	r3, [pc, #56]	; (d6bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6b7a:	681a      	ldr	r2, [r3, #0]
   d6b7c:	07d2      	lsls	r2, r2, #31
   d6b7e:	bf5c      	itt	pl
   d6b80:	2201      	movpl	r2, #1
   d6b82:	601a      	strpl	r2, [r3, #0]
   d6b84:	4770      	bx	lr
   d6b86:	bf00      	nop
   d6b88:	2003e77c 	.word	0x2003e77c
   d6b8c:	2003e778 	.word	0x2003e778
   d6b90:	2003e774 	.word	0x2003e774
   d6b94:	2003e770 	.word	0x2003e770
   d6b98:	2003e76c 	.word	0x2003e76c
   d6b9c:	2003e768 	.word	0x2003e768
   d6ba0:	2003e764 	.word	0x2003e764
   d6ba4:	2003e760 	.word	0x2003e760
   d6ba8:	2003e75c 	.word	0x2003e75c
   d6bac:	2003e758 	.word	0x2003e758
   d6bb0:	2003e754 	.word	0x2003e754
   d6bb4:	2003e750 	.word	0x2003e750

000d6bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6bb8:	4b18      	ldr	r3, [pc, #96]	; (d6c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6bba:	681a      	ldr	r2, [r3, #0]
   d6bbc:	07d1      	lsls	r1, r2, #31
   d6bbe:	bf5c      	itt	pl
   d6bc0:	2201      	movpl	r2, #1
   d6bc2:	601a      	strpl	r2, [r3, #0]
   d6bc4:	4b16      	ldr	r3, [pc, #88]	; (d6c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6bc6:	681a      	ldr	r2, [r3, #0]
   d6bc8:	07d2      	lsls	r2, r2, #31
   d6bca:	bf5c      	itt	pl
   d6bcc:	2201      	movpl	r2, #1
   d6bce:	601a      	strpl	r2, [r3, #0]
   d6bd0:	4b14      	ldr	r3, [pc, #80]	; (d6c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6bd2:	681a      	ldr	r2, [r3, #0]
   d6bd4:	07d0      	lsls	r0, r2, #31
   d6bd6:	bf5c      	itt	pl
   d6bd8:	2201      	movpl	r2, #1
   d6bda:	601a      	strpl	r2, [r3, #0]
   d6bdc:	4b12      	ldr	r3, [pc, #72]	; (d6c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6bde:	681a      	ldr	r2, [r3, #0]
   d6be0:	07d1      	lsls	r1, r2, #31
   d6be2:	bf5c      	itt	pl
   d6be4:	2201      	movpl	r2, #1
   d6be6:	601a      	strpl	r2, [r3, #0]
   d6be8:	4b10      	ldr	r3, [pc, #64]	; (d6c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6bea:	681a      	ldr	r2, [r3, #0]
   d6bec:	07d2      	lsls	r2, r2, #31
   d6bee:	bf5c      	itt	pl
   d6bf0:	2201      	movpl	r2, #1
   d6bf2:	601a      	strpl	r2, [r3, #0]
   d6bf4:	4b0e      	ldr	r3, [pc, #56]	; (d6c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6bf6:	681a      	ldr	r2, [r3, #0]
   d6bf8:	07d0      	lsls	r0, r2, #31
   d6bfa:	bf5c      	itt	pl
   d6bfc:	2201      	movpl	r2, #1
   d6bfe:	601a      	strpl	r2, [r3, #0]
   d6c00:	4b0c      	ldr	r3, [pc, #48]	; (d6c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6c02:	681a      	ldr	r2, [r3, #0]
   d6c04:	07d1      	lsls	r1, r2, #31
   d6c06:	bf5c      	itt	pl
   d6c08:	2201      	movpl	r2, #1
   d6c0a:	601a      	strpl	r2, [r3, #0]
   d6c0c:	4b0a      	ldr	r3, [pc, #40]	; (d6c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6c0e:	681a      	ldr	r2, [r3, #0]
   d6c10:	07d2      	lsls	r2, r2, #31
   d6c12:	bf5c      	itt	pl
   d6c14:	2201      	movpl	r2, #1
   d6c16:	601a      	strpl	r2, [r3, #0]
   d6c18:	4770      	bx	lr
   d6c1a:	bf00      	nop
   d6c1c:	2003e79c 	.word	0x2003e79c
   d6c20:	2003e798 	.word	0x2003e798
   d6c24:	2003e794 	.word	0x2003e794
   d6c28:	2003e790 	.word	0x2003e790
   d6c2c:	2003e78c 	.word	0x2003e78c
   d6c30:	2003e788 	.word	0x2003e788
   d6c34:	2003e784 	.word	0x2003e784
   d6c38:	2003e780 	.word	0x2003e780

000d6c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6c3c:	4b18      	ldr	r3, [pc, #96]	; (d6ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6c3e:	681a      	ldr	r2, [r3, #0]
   d6c40:	07d1      	lsls	r1, r2, #31
   d6c42:	bf5c      	itt	pl
   d6c44:	2201      	movpl	r2, #1
   d6c46:	601a      	strpl	r2, [r3, #0]
   d6c48:	4b16      	ldr	r3, [pc, #88]	; (d6ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6c4a:	681a      	ldr	r2, [r3, #0]
   d6c4c:	07d2      	lsls	r2, r2, #31
   d6c4e:	bf5c      	itt	pl
   d6c50:	2201      	movpl	r2, #1
   d6c52:	601a      	strpl	r2, [r3, #0]
   d6c54:	4b14      	ldr	r3, [pc, #80]	; (d6ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6c56:	681a      	ldr	r2, [r3, #0]
   d6c58:	07d0      	lsls	r0, r2, #31
   d6c5a:	bf5c      	itt	pl
   d6c5c:	2201      	movpl	r2, #1
   d6c5e:	601a      	strpl	r2, [r3, #0]
   d6c60:	4b12      	ldr	r3, [pc, #72]	; (d6cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6c62:	681a      	ldr	r2, [r3, #0]
   d6c64:	07d1      	lsls	r1, r2, #31
   d6c66:	bf5c      	itt	pl
   d6c68:	2201      	movpl	r2, #1
   d6c6a:	601a      	strpl	r2, [r3, #0]
   d6c6c:	4b10      	ldr	r3, [pc, #64]	; (d6cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6c6e:	681a      	ldr	r2, [r3, #0]
   d6c70:	07d2      	lsls	r2, r2, #31
   d6c72:	bf5c      	itt	pl
   d6c74:	2201      	movpl	r2, #1
   d6c76:	601a      	strpl	r2, [r3, #0]
   d6c78:	4b0e      	ldr	r3, [pc, #56]	; (d6cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6c7a:	681a      	ldr	r2, [r3, #0]
   d6c7c:	07d0      	lsls	r0, r2, #31
   d6c7e:	bf5c      	itt	pl
   d6c80:	2201      	movpl	r2, #1
   d6c82:	601a      	strpl	r2, [r3, #0]
   d6c84:	4b0c      	ldr	r3, [pc, #48]	; (d6cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6c86:	681a      	ldr	r2, [r3, #0]
   d6c88:	07d1      	lsls	r1, r2, #31
   d6c8a:	bf5c      	itt	pl
   d6c8c:	2201      	movpl	r2, #1
   d6c8e:	601a      	strpl	r2, [r3, #0]
   d6c90:	4b0a      	ldr	r3, [pc, #40]	; (d6cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6c92:	681a      	ldr	r2, [r3, #0]
   d6c94:	07d2      	lsls	r2, r2, #31
   d6c96:	bf5c      	itt	pl
   d6c98:	2201      	movpl	r2, #1
   d6c9a:	601a      	strpl	r2, [r3, #0]
   d6c9c:	4770      	bx	lr
   d6c9e:	bf00      	nop
   d6ca0:	2003e7bc 	.word	0x2003e7bc
   d6ca4:	2003e7b8 	.word	0x2003e7b8
   d6ca8:	2003e7b4 	.word	0x2003e7b4
   d6cac:	2003e7b0 	.word	0x2003e7b0
   d6cb0:	2003e7ac 	.word	0x2003e7ac
   d6cb4:	2003e7a8 	.word	0x2003e7a8
   d6cb8:	2003e7a4 	.word	0x2003e7a4
   d6cbc:	2003e7a0 	.word	0x2003e7a0

000d6cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6cc0:	4b24      	ldr	r3, [pc, #144]	; (d6d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6cc2:	681a      	ldr	r2, [r3, #0]
   d6cc4:	07d0      	lsls	r0, r2, #31
   d6cc6:	bf5c      	itt	pl
   d6cc8:	2201      	movpl	r2, #1
   d6cca:	601a      	strpl	r2, [r3, #0]
   d6ccc:	4b22      	ldr	r3, [pc, #136]	; (d6d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6cce:	681a      	ldr	r2, [r3, #0]
   d6cd0:	07d1      	lsls	r1, r2, #31
   d6cd2:	bf5c      	itt	pl
   d6cd4:	2201      	movpl	r2, #1
   d6cd6:	601a      	strpl	r2, [r3, #0]
   d6cd8:	4b20      	ldr	r3, [pc, #128]	; (d6d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6cda:	681a      	ldr	r2, [r3, #0]
   d6cdc:	07d2      	lsls	r2, r2, #31
   d6cde:	bf5c      	itt	pl
   d6ce0:	2201      	movpl	r2, #1
   d6ce2:	601a      	strpl	r2, [r3, #0]
   d6ce4:	4b1e      	ldr	r3, [pc, #120]	; (d6d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6ce6:	681a      	ldr	r2, [r3, #0]
   d6ce8:	07d0      	lsls	r0, r2, #31
   d6cea:	bf5c      	itt	pl
   d6cec:	2201      	movpl	r2, #1
   d6cee:	601a      	strpl	r2, [r3, #0]
   d6cf0:	4b1c      	ldr	r3, [pc, #112]	; (d6d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6cf2:	681a      	ldr	r2, [r3, #0]
   d6cf4:	07d1      	lsls	r1, r2, #31
   d6cf6:	bf5c      	itt	pl
   d6cf8:	2201      	movpl	r2, #1
   d6cfa:	601a      	strpl	r2, [r3, #0]
   d6cfc:	4b1a      	ldr	r3, [pc, #104]	; (d6d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6cfe:	681a      	ldr	r2, [r3, #0]
   d6d00:	07d2      	lsls	r2, r2, #31
   d6d02:	bf5c      	itt	pl
   d6d04:	2201      	movpl	r2, #1
   d6d06:	601a      	strpl	r2, [r3, #0]
   d6d08:	4b18      	ldr	r3, [pc, #96]	; (d6d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6d0a:	681a      	ldr	r2, [r3, #0]
   d6d0c:	07d0      	lsls	r0, r2, #31
   d6d0e:	bf5c      	itt	pl
   d6d10:	2201      	movpl	r2, #1
   d6d12:	601a      	strpl	r2, [r3, #0]
   d6d14:	4b16      	ldr	r3, [pc, #88]	; (d6d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6d16:	681a      	ldr	r2, [r3, #0]
   d6d18:	07d1      	lsls	r1, r2, #31
   d6d1a:	bf5c      	itt	pl
   d6d1c:	2201      	movpl	r2, #1
   d6d1e:	601a      	strpl	r2, [r3, #0]
   d6d20:	4b14      	ldr	r3, [pc, #80]	; (d6d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6d22:	681a      	ldr	r2, [r3, #0]
   d6d24:	07d2      	lsls	r2, r2, #31
   d6d26:	bf5c      	itt	pl
   d6d28:	2201      	movpl	r2, #1
   d6d2a:	601a      	strpl	r2, [r3, #0]
   d6d2c:	4b12      	ldr	r3, [pc, #72]	; (d6d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6d2e:	681a      	ldr	r2, [r3, #0]
   d6d30:	07d0      	lsls	r0, r2, #31
   d6d32:	bf5c      	itt	pl
   d6d34:	2201      	movpl	r2, #1
   d6d36:	601a      	strpl	r2, [r3, #0]
   d6d38:	4b10      	ldr	r3, [pc, #64]	; (d6d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6d3a:	681a      	ldr	r2, [r3, #0]
   d6d3c:	07d1      	lsls	r1, r2, #31
   d6d3e:	bf5c      	itt	pl
   d6d40:	2201      	movpl	r2, #1
   d6d42:	601a      	strpl	r2, [r3, #0]
   d6d44:	4b0e      	ldr	r3, [pc, #56]	; (d6d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6d46:	681a      	ldr	r2, [r3, #0]
   d6d48:	07d2      	lsls	r2, r2, #31
   d6d4a:	bf5c      	itt	pl
   d6d4c:	2201      	movpl	r2, #1
   d6d4e:	601a      	strpl	r2, [r3, #0]
   d6d50:	4770      	bx	lr
   d6d52:	bf00      	nop
   d6d54:	2003e7ec 	.word	0x2003e7ec
   d6d58:	2003e7e8 	.word	0x2003e7e8
   d6d5c:	2003e7e4 	.word	0x2003e7e4
   d6d60:	2003e7e0 	.word	0x2003e7e0
   d6d64:	2003e7dc 	.word	0x2003e7dc
   d6d68:	2003e7d8 	.word	0x2003e7d8
   d6d6c:	2003e7d4 	.word	0x2003e7d4
   d6d70:	2003e7d0 	.word	0x2003e7d0
   d6d74:	2003e7cc 	.word	0x2003e7cc
   d6d78:	2003e7c8 	.word	0x2003e7c8
   d6d7c:	2003e7c4 	.word	0x2003e7c4
   d6d80:	2003e7c0 	.word	0x2003e7c0

000d6d84 <__cxa_atexit>:
   d6d84:	b510      	push	{r4, lr}
   d6d86:	4c05      	ldr	r4, [pc, #20]	; (d6d9c <__cxa_atexit+0x18>)
   d6d88:	4613      	mov	r3, r2
   d6d8a:	b12c      	cbz	r4, d6d98 <__cxa_atexit+0x14>
   d6d8c:	460a      	mov	r2, r1
   d6d8e:	4601      	mov	r1, r0
   d6d90:	2002      	movs	r0, #2
   d6d92:	f3af 8000 	nop.w
   d6d96:	bd10      	pop	{r4, pc}
   d6d98:	4620      	mov	r0, r4
   d6d9a:	bd10      	pop	{r4, pc}
   d6d9c:	00000000 	.word	0x00000000

000d6da0 <memcmp>:
   d6da0:	b510      	push	{r4, lr}
   d6da2:	3901      	subs	r1, #1
   d6da4:	4402      	add	r2, r0
   d6da6:	4290      	cmp	r0, r2
   d6da8:	d007      	beq.n	d6dba <memcmp+0x1a>
   d6daa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6dae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6db2:	42a3      	cmp	r3, r4
   d6db4:	d0f7      	beq.n	d6da6 <memcmp+0x6>
   d6db6:	1b18      	subs	r0, r3, r4
   d6db8:	bd10      	pop	{r4, pc}
   d6dba:	2000      	movs	r0, #0
   d6dbc:	bd10      	pop	{r4, pc}

000d6dbe <memcpy>:
   d6dbe:	b510      	push	{r4, lr}
   d6dc0:	1e43      	subs	r3, r0, #1
   d6dc2:	440a      	add	r2, r1
   d6dc4:	4291      	cmp	r1, r2
   d6dc6:	d004      	beq.n	d6dd2 <memcpy+0x14>
   d6dc8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6dd0:	e7f8      	b.n	d6dc4 <memcpy+0x6>
   d6dd2:	bd10      	pop	{r4, pc}

000d6dd4 <memset>:
   d6dd4:	4402      	add	r2, r0
   d6dd6:	4603      	mov	r3, r0
   d6dd8:	4293      	cmp	r3, r2
   d6dda:	d002      	beq.n	d6de2 <memset+0xe>
   d6ddc:	f803 1b01 	strb.w	r1, [r3], #1
   d6de0:	e7fa      	b.n	d6dd8 <memset+0x4>
   d6de2:	4770      	bx	lr

000d6de4 <srand>:
   d6de4:	b538      	push	{r3, r4, r5, lr}
   d6de6:	4b12      	ldr	r3, [pc, #72]	; (d6e30 <srand+0x4c>)
   d6de8:	681c      	ldr	r4, [r3, #0]
   d6dea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6dec:	4605      	mov	r5, r0
   d6dee:	b9d3      	cbnz	r3, d6e26 <srand+0x42>
   d6df0:	2018      	movs	r0, #24
   d6df2:	f7fe fa5d 	bl	d52b0 <malloc>
   d6df6:	f243 330e 	movw	r3, #13070	; 0x330e
   d6dfa:	63a0      	str	r0, [r4, #56]	; 0x38
   d6dfc:	8003      	strh	r3, [r0, #0]
   d6dfe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6e02:	8043      	strh	r3, [r0, #2]
   d6e04:	f241 2334 	movw	r3, #4660	; 0x1234
   d6e08:	8083      	strh	r3, [r0, #4]
   d6e0a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6e0e:	80c3      	strh	r3, [r0, #6]
   d6e10:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6e14:	8103      	strh	r3, [r0, #8]
   d6e16:	2305      	movs	r3, #5
   d6e18:	8143      	strh	r3, [r0, #10]
   d6e1a:	230b      	movs	r3, #11
   d6e1c:	8183      	strh	r3, [r0, #12]
   d6e1e:	2201      	movs	r2, #1
   d6e20:	2300      	movs	r3, #0
   d6e22:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6e26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e28:	2200      	movs	r2, #0
   d6e2a:	611d      	str	r5, [r3, #16]
   d6e2c:	615a      	str	r2, [r3, #20]
   d6e2e:	bd38      	pop	{r3, r4, r5, pc}
   d6e30:	2003e49c 	.word	0x2003e49c

000d6e34 <strlen>:
   d6e34:	4603      	mov	r3, r0
   d6e36:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6e3a:	2a00      	cmp	r2, #0
   d6e3c:	d1fb      	bne.n	d6e36 <strlen+0x2>
   d6e3e:	1a18      	subs	r0, r3, r0
   d6e40:	3801      	subs	r0, #1
   d6e42:	4770      	bx	lr

000d6e44 <strncmp>:
   d6e44:	b530      	push	{r4, r5, lr}
   d6e46:	b182      	cbz	r2, d6e6a <strncmp+0x26>
   d6e48:	1e45      	subs	r5, r0, #1
   d6e4a:	3901      	subs	r1, #1
   d6e4c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6e50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6e54:	42a3      	cmp	r3, r4
   d6e56:	d106      	bne.n	d6e66 <strncmp+0x22>
   d6e58:	43ec      	mvns	r4, r5
   d6e5a:	4414      	add	r4, r2
   d6e5c:	42e0      	cmn	r0, r4
   d6e5e:	d001      	beq.n	d6e64 <strncmp+0x20>
   d6e60:	2b00      	cmp	r3, #0
   d6e62:	d1f3      	bne.n	d6e4c <strncmp+0x8>
   d6e64:	461c      	mov	r4, r3
   d6e66:	1b18      	subs	r0, r3, r4
   d6e68:	bd30      	pop	{r4, r5, pc}
   d6e6a:	4610      	mov	r0, r2
   d6e6c:	bd30      	pop	{r4, r5, pc}

000d6e6e <strnlen>:
   d6e6e:	b510      	push	{r4, lr}
   d6e70:	4603      	mov	r3, r0
   d6e72:	4401      	add	r1, r0
   d6e74:	428b      	cmp	r3, r1
   d6e76:	d004      	beq.n	d6e82 <strnlen+0x14>
   d6e78:	781a      	ldrb	r2, [r3, #0]
   d6e7a:	1c5c      	adds	r4, r3, #1
   d6e7c:	b10a      	cbz	r2, d6e82 <strnlen+0x14>
   d6e7e:	4623      	mov	r3, r4
   d6e80:	e7f8      	b.n	d6e74 <strnlen+0x6>
   d6e82:	1a18      	subs	r0, r3, r0
   d6e84:	bd10      	pop	{r4, pc}

000d6e86 <link_code_end>:
	...

000d6e88 <dynalib_user>:
   d6e88:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6e98:	0000 0000 554e 4c4c 6500 6576 746e 253d     ....NULL.event=%
   d6ea8:	2073 6164 6174 253d 0073 774f 6c65 632e     s data=%s.Owel.c
   d6eb8:	646f 7365 5400 6968 2073 7369 5820 6e65     odes.This is Xen
   d6ec8:	6e6f 6420 7665 6369 2e65 2e2e 4d00 7365     on device....Mes
   d6ed8:	0068 654e 7774 726f 006b 3036 3030 6900     h.Network.6000.i
   d6ee8:	6667 6c6f 6f6c 6577 7372 0000               gfollowers..

000d6ef4 <_ZTV12Adafruit_GFX>:
	...
   d6f04:	45ad 000d 5cc5 000d 40a9 000d 42ad 000d     .E...\...@...B..
   d6f14:	43cd 000d 43e9 000d 436d 000d 4403 000d     .C...C..mC...D..
   d6f24:	443b 000d 4457 000d                         ;D..WD..

000d6f2c <_ZL4font>:
   d6f2c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6f3c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6f4c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6f5c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6f6c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6f7c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6f8c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6f9c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6fac:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6fbc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6fcc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6fdc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6fec:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6ffc:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d700c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d701c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d702c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d703c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d704c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d705c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d706c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d707c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d708c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d709c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d70ac:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d70bc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d70cc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d70dc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d70ec:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d70fc:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d710c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d711c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d712c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d713c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d714c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d715c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d716c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d717c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d718c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d719c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d71ac:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d71bc:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d71cc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d71dc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d71ec:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d71fc:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d720c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d721c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d722c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d723c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d724c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d725c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d726c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d727c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d728c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d729c:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d72ac:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d72bc:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d72cc:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d72dc:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d72ec:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d72fc:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d730c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d731c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d732c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d733c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d734c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d735c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d736c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d737c:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d738c:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d739c:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d73ac:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d73bc:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d73cc:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d73dc:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d73ec:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d73fc:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d740c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d741c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d7428 <_ZTV16Adafruit_SSD1306>:
	...
   d7430:	40cd 000d 4271 000d 45ad 000d 5cc5 000d     .@..qB...E...\..
   d7440:	4951 000d 42ad 000d 47b5 000d 4641 000d     QI...B...G..AF..
   d7450:	436d 000d 4403 000d 443b 000d 4457 000d     mC...D..;D..WD..

000d7460 <_ZTVN5spark13EthernetClassE>:
	...
   d7468:	5379 000d 536f 000d 5365 000d 535b 000d     yS..oS..eS..[S..
   d7478:	534f 000d 5343 000d 5337 000d 532f 000d     OS..CS..7S../S..
   d7488:	5325 000d 531b 000d 5be5 000d               %S...S...[..

000d7494 <_ZTV7TwoWire>:
	...
   d749c:	5399 000d 53e3 000d 53bb 000d 539b 000d     .S...S...S...S..
   d74ac:	53c3 000d 53cb 000d 53d3 000d 53db 000d     .S...S...S...S..

000d74bc <_ZTV9IPAddress>:
	...
   d74c4:	5455 000d 5445 000d 5447 000d 6162 6475     UT..ET..GT..baud
   d74d4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d74e4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d74f4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d7504:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d7514:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d7524:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7534:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7544:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d7554:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d7564:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d7574:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d7584:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d7594:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d75a4:	6170 696e 0063 6c61 006c 0000               panic.all...

000d75b0 <_ZTVN5spark9MeshClassE>:
	...
   d75b8:	55f9 000d 55ef 000d 55e5 000d 55db 000d     .U...U...U...U..
   d75c8:	55cf 000d 55c3 000d 55b7 000d 55af 000d     .U...U...U...U..
   d75d8:	55a5 000d 559b 000d 5be5 000d 6666 3330     .U...U...[..ff03
   d75e8:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   d75f8:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   d7608:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000d7614 <_ZTVN5spark12NetworkClassE>:
	...
   d761c:	5b7d 000d 5b87 000d 5b91 000d 5b9b 000d     }[...[...[...[..
   d762c:	5ba5 000d 5bb1 000d 5bbd 000d 5bc9 000d     .[...[...[...[..
   d763c:	5bd1 000d 5bdb 000d 5be5 000d               .[...[...[..

000d7648 <_ZTV8SPIClass>:
	...
   d7650:	5e41 000d 5e43 000d                         A^..C^..

000d7658 <_ZL14clock_divisors>:
   d7658:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d7668:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7678:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7688:	0000 0000                                   ....

000d768c <_ZTV3UDP>:
	...
   d7694:	65c9 000d 65ed 000d 5fa5 000d 60cf 000d     .e...e..._...`..
   d76a4:	5f9d 000d 5fbb 000d 5fd9 000d 5ff3 000d     ._..._..._..._..
   d76b4:	6017 000d 60b3 000d 63b5 000d 6155 000d     .`...`...c..Ua..
   d76c4:	62d5 000d 5f85 000d 655d 000d 6259 000d     .b..._..]e..Yb..
   d76d4:	618d 000d 658b 000d 60f9 000d 5f93 000d     .a...e...`..._..
   d76e4:	6135 000d 5f99 000d 5ff5 000d fff0 ffff     5a..._..._......
   d76f4:	0000 0000 600f 000d                         .....`..

000d76fc <_ZTV11USARTSerial>:
	...
   d7704:	6619 000d 6669 000d 6677 000d 5cc5 000d     .f..if..wf...\..
   d7714:	662d 000d 664f 000d 663b 000d 6663 000d     -f..Of..;f..cf..
   d7724:	661b 000d 661f 000d                         .f...f..

000d772c <_ZTV9USBSerial>:
	...
   d7734:	6755 000d 67a5 000d 67b3 000d 5cc5 000d     Ug...g...g...\..
   d7744:	6791 000d 6757 000d 676d 000d 679f 000d     .g..Wg..mg...g..
   d7754:	6783 000d 6751 000d                         .g..Qg..

000d775c <_ZSt7nothrow>:
   d775c:	0000 0000                                   ....

000d7760 <__sf_fake_stdin>:
	...

000d7780 <__sf_fake_stdout>:
	...

000d77a0 <__sf_fake_stderr>:
	...
   d77c0:	0043                                        C.

000d77c2 <link_const_variable_data_end>:
	...

000d77c4 <link_constructors_location>:
   d77c4:	000d4281 	.word	0x000d4281
   d77c8:	000d463d 	.word	0x000d463d
   d77cc:	000d4d31 	.word	0x000d4d31
   d77d0:	000d52f9 	.word	0x000d52f9
   d77d4:	000d5385 	.word	0x000d5385
   d77d8:	000d555d 	.word	0x000d555d
   d77dc:	000d5b2d 	.word	0x000d5b2d
   d77e0:	000d5cb1 	.word	0x000d5cb1
   d77e4:	000d5e25 	.word	0x000d5e25
   d77e8:	000d5f59 	.word	0x000d5f59
   d77ec:	000d5f71 	.word	0x000d5f71
   d77f0:	000d6a69 	.word	0x000d6a69
   d77f4:	000d6af5 	.word	0x000d6af5
   d77f8:	000d6bb9 	.word	0x000d6bb9
   d77fc:	000d6c3d 	.word	0x000d6c3d
   d7800:	000d6cc1 	.word	0x000d6cc1

000d7804 <link_constructors_end>:
	...
